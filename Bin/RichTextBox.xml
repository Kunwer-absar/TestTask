<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RichTextBox</name>
    </assembly>
    <members>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry">
            <summary>
            	Rule Entry for expanding base words
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry.AddCharacters">
            <summary>
                The characters to add to the string
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry.Condition">
            <summary>
                The condition to be met in order to add characters
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry.StripCharacters">
            <summary>
                The characters to remove before adding characters
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry.ConditionCount">
            <summary>
                The number of conditions that must be met
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection">
            <summary>
                A collection that stores 'AffixEntry' objects.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.#ctor">
            <summary>
                Initializes a new instance of 'AffixEntryCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection)">
            <summary>
                Initializes a new instance of 'AffixEntryCollection' based on an already existing instance.
            </summary>
            <param name='Value'>
                A 'AffixEntryCollection' from which the contents is copied
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry[])">
            <summary>
                Initializes a new instance of 'AffixEntryCollection' with an array of 'AffixEntry' objects.
            </summary>
            <param name='Value'>
                An array of 'AffixEntry' objects with which to initialize the collection
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.Add(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Adds a 'AffixEntry' item with the specified value to the 'AffixEntryCollection'
            </summary>
            <param name='Value'>
                The 'AffixEntry' to add.
            </param>
            <returns>
                The index at which the new element was inserted.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.AddRange(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry[])">
            <summary>
                Copies the elements of an array at the end of this instance of 'AffixEntryCollection'.
            </summary>
            <param name='Value'>
                An array of 'AffixEntry' objects to add to the collection.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.AddRange(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection)">
            <summary>
                Adds the contents of another 'AffixEntryCollection' at the end of this instance.
            </summary>
            <param name='Value'>
                A 'AffixEntryCollection' containing the objects to add to the collection.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.Contains(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Gets a value indicating whether the 'AffixEntryCollection' contains the specified value.
            </summary>
            <param name='Value'>
                The item to locate.
            </param>
            <returns>
                True if the item exists in the collection; false otherwise.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.CopyTo(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry[],System.Int32)">
            <summary>
                Copies the 'AffixEntryCollection' values to a one-dimensional System.Array
                instance starting at the specified array index.
            </summary>
            <param name='Array'>
                The one-dimensional System.Array that represents the copy destination.
            </param>
            <param name='Index'>
                The index in the array where copying begins.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.IndexOf(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Returns the index of a 'AffixEntry' object in the collection.
            </summary>
            <param name='Value'>
                The 'AffixEntry' object whose index will be retrieved.
            </param>
            <returns>
                If found, the index of the value; otherwise, -1.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.Insert(System.Int32,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Inserts an existing 'AffixEntry' into the collection at the specified index.
            </summary>
            <param name='Index'>
                The zero-based index where the new item should be inserted.
            </param>
            <param name='Value'>
                The item to insert.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.GetEnumerator">
            <summary>
                Returns an enumerator that can be used to iterate through
                the 'AffixEntryCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.Remove(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Removes a specific item from the 'AffixEntryCollection'.
            </summary>
            <param name='Value'>
                The item to remove from the 'AffixEntryCollection'.
            </param>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection.Item(System.Int32)">
            <summary>
                Represents the 'AffixEntry' item at the specified index position.
            </summary>
            <param name='Index'>
                The zero-based index of the entry to locate in the collection.
            </param>
            <value>
                The entry at the specified index of the collection.
            </value>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator">
            <summary>
                A strongly typed enumerator for 'AffixEntryCollection'
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryCollection)">
            <summary>
                Enumerator constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.Reset">
            <summary>
                Sets the enumerator to the first element in the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
                Sets the enumerator to the first element in the collection
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.Current">
            <summary>
                Gets the current element from the collection (strongly typed)
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntryEnumerator.System#Collections#IEnumerator#Current">
            <summary>
                Gets the current element from the collection
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule">
            <summary>
            	Rule for expanding base words
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule.AllowCombine">
            <summary>
                Allow combining prefix and suffix
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule.AffixEntries">
            <summary>
                Collection of text entries that make up this rule
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule.Name">
            <summary>
                Name of the Affix rule
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection">
            <summary>
                A dictionary collection that stores 'AffixRule' objects.
            </summary>	
        </member>
        <member name="F:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.innerHash">
            <summary>
                Internal Hashtable
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="original" type="AffixRuleCollection">
                <para>
                    A 'AffixRuleCollection' from which the contents is copied
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Collections.IDictionary)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="dictionary" type="System.Collections.IDictionary">
                <para>
                    The IDictionary to copy to a new 'AffixRuleCollection'.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="capacity" type="int">
                <para>
                    The approximate number of elements that the 'AffixRuleCollection' can initially contain.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Collections.IDictionary,System.Single)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="dictionary" type="System.Collections.IDictionary">
                <para>
                    The IDictionary to copy to a new 'AffixRuleCollection'.
                </para>
            </param>
            <param name="loadFactor" type="float">
                <para>
                    A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="codeProvider" type="System.Collections.IHashCodeProvider">
                <para>
                    The IHashCodeProvider that supplies the hash codes for all keys in the 'AffixRuleCollection'.
                </para>
            </param>
            <param name="comparer" type="System.Collections.IComparer">
                <para>
                    The IComparer to use to determine whether two keys are equal.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Int32,System.Int32)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="capacity" type="int">
                <para>
                    The approximate number of elements that the 'AffixRuleCollection' can initially contain.
                </para>
            </param>
            <param name="loadFactor" type="int">
                <para>
                    A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Collections.IDictionary,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="dictionary" type="System.Collections.IDictionary">
                <para>
                    The IDictionary to copy to a new 'AffixRuleCollection'.
                </para>
            </param>
            <param name="codeProvider" type="System.Collections.IHashCodeProvider">
                <para>
                    The IHashCodeProvider that supplies the hash codes for all keys in the 'AffixRuleCollection'.
                </para>
            </param>
            <param name="comparer" type="System.Collections.IComparer">
                <para>
                    The IComparer to use to determine whether two keys are equal.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="capacity" type="int">
                <para>
                    The approximate number of elements that the 'AffixRuleCollection' can initially contain.
                </para>
            </param>
            <param name="codeProvider" type="System.Collections.IHashCodeProvider">
                <para>
                    The IHashCodeProvider that supplies the hash codes for all keys in the 'AffixRuleCollection'.
                </para>
            </param>
            <param name="comparer" type="System.Collections.IComparer">
                <para>
                    The IComparer to use to determine whether two keys are equal.
                </para>
            </param>		
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Collections.IDictionary,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="dictionary" type="System.Collections.IDictionary">
                <para>
                    The IDictionary to copy to a new 'AffixRuleCollection'.
                </para>
            </param>
            <param name="loadFactor" type="float">
                <para>
                    A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.
                </para>
            </param>
            <param name="codeProvider" type="System.Collections.IHashCodeProvider">
                <para>
                    The IHashCodeProvider that supplies the hash codes for all keys in the 'AffixRuleCollection'.
                </para>
            </param>
            <param name="comparer" type="System.Collections.IComparer">
                <para>
                    The IComparer to use to determine whether two keys are equal.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.#ctor(System.Int32,System.Single,System.Collections.IHashCodeProvider,System.Collections.IComparer)">
            <summary>
                Initializes a new instance of 'AffixRuleCollection'.
            </summary>
            <param name="capacity" type="int">
                <para>
                    The approximate number of elements that the 'AffixRuleCollection' can initially contain. 
                </para>
            </param>
            <param name="loadFactor" type="float">
                <para>
                    A number in the range from 0.1 through 1.0 indicating the maximum ratio of elements to buckets.
                </para>
            </param>
            <param name="codeProvider" type="System.Collections.IHashCodeProvider">
                <para>
                    The IHashCodeProvider that supplies the hash codes for all keys in the 'AffixRuleCollection'.
                </para>
            </param>
            <param name="comparer" type="System.Collections.IComparer">
                <para>
                    The IComparer to use to determine whether two keys are equal. 
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.GetEnumerator">
            <summary>
                Returns an enumerator that can be used to iterate through the 'AffixRuleCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Remove(System.String)">
            <summary>
                Removes the element with the specified key from the AffixRuleCollection.
            </summary>
            <param name="key" type="string">
                <para>
                    The key of the element to remove
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Contains(System.String)">
            <summary>
                Determines whether the AffixRuleCollection contains an element with the specified key.
            </summary>
            <param name="key" type="string">
                <para>
                    The key to locate in the AffixRuleCollection.
                </para>
            </param>
            <returns>
                true if the AffixRuleCollection contains an element with the key; otherwise, false.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Clear">
            <summary>
                removes all elements from the AffixRuleCollection.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Add(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule)">
            <summary>
                adds an element with the provided key and value to the AffixRuleCollection.
            </summary>
            <param name="key" type="string">
                <para>
                    The string Object to use as the key of the element to add.
                </para>
            </param>
            <param name="value" type="AffixRule">
                <para>
                    The AffixRule Object to use as the value of the element to add.
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.CopyTo(System.Array,System.Int32)">
            <summary>
                copies the elements of the AffixRuleCollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array" type="System.Array">
                <para>
                    The one-dimensional Array that is the destination of the elements copied from AffixRuleCollection. The Array must have zero-based indexing. 
                </para>
            </param>
            <param name="index" type="int">
                <para>
                    The zero-based index in array at which copying begins. 
                </para>
            </param>		
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Clone">
            <summary>
                Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
                A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.ContainsKey(System.String)">
            <summary>
                Determines whether the AffixRuleCollection contains a specific key.
            </summary>
            <param name="key" type="string">
                <para>
                    The key to locate in the AffixRuleCollection.
                </para>
            </param>
            <returns>
                true if the AffixRuleCollection contains an element with the specified key; otherwise, false.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.ContainsValue(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule)">
            <summary>
                Determines whether the AffixRuleCollection contains a specific value.
            </summary>
            <param name="value" type="AffixRule">
                <para>
                    The value to locate in the AffixRuleCollection. The value can be a null reference (Nothing in Visual Basic).
                </para>
            </param>
            <returns>
                true if the AffixRuleCollection contains an element with the specified value; otherwise, false.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Synchronized(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection)">
            <summary>
                Returns a synchronized (thread-safe) wrapper for the AffixRuleCollection.
            </summary>
            <param name="nonSync" type="AffixRuleCollection">
                <para>
                    The AffixRuleCollection to synchronize.
                </para>
            </param>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.IsReadOnly">
            <summary>
                gets a value indicating whether the AffixRuleCollection is read-only.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Item(System.String)">
            <summary>
                Gets or sets the element with the specified key.
            </summary>
            <value>
                <para>
                    The key of the element to get or set.
                </para>
            </value>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Values">
            <summary>
                gets an ICollection containing the values in the AffixRuleCollection.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Keys">
            <summary>
                gets an ICollection containing the keys of the AffixRuleCollection.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.IsFixedSize">
            <summary>
                gets a value indicating whether the AffixRuleCollection has a fixed size.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.IsSynchronized">
            <summary>
                Gets a value indicating whether access to the AffixRuleCollection is synchronized (thread-safe).
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.Count">
            <summary>
                Gets the number of elements contained in the AffixRuleCollection.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleCollection.SyncRoot">
            <summary>
                Gets an object that can be used to synchronize access to the AffixRuleCollection.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator">
            <summary>
                A strongly typed enumerator for 'AffixRuleCollection'
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.Reset">
            <summary>
                Sets the enumerator to the first element in the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.Key">
            <summary>
                 gets the key of the current AffixRuleCollection entry.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.Value">
            <summary>
                gets the value of the current AffixRuleCollection entry.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.Entry">
            <summary>
                 gets both the key and the value of the current AffixRuleCollection entry.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRuleEnumerator.Current">
            <summary>
                Gets the current element from the collection
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility">
            <summary>
            Summary description for AffixUtility.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.AddPrefix(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule)">
            <summary>
                Adds a prefix to a word
            </summary>
            <param name="word" type="string">
                <para>
                    The word to add the prefix to
                </para>
            </param>
            <param name="rule" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule">
                <para>
                    The AffixRule to use when adding the prefix
                </para>
            </param>
            <returns>
                The word with the prefix added
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.AddSuffix(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule)">
            <summary>
                Adds a suffix to a word
            </summary>
            <param name="word" type="string">
                <para>
                    The word to get the suffix added to
                </para>
            </param>
            <param name="rule" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixRule">
                <para>
                    The AffixRule to use when adding the suffix
                </para>
            </param>
            <returns>
                The word with the suffix added
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.EncodeConditions(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Generates the condition character array
            </summary>
            <param name="conditionText" type="string">
                <para>
                    the text form of the conditions
                </para>
            </param>
            <param name="entry" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry">
                <para>
                    The AffixEntry to add the condition array to
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.RemovePrefix(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Removes the affix prefix rule entry for the word if valid
            </summary>
            <param name="word" type="string">
                <para>
                    The word to be modified
                </para>
            </param>
            <param name="entry" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry">
                <para>
                    The affix rule entry to use
                </para>
            </param>
            <returns>
                The word after affix removed.  Will be the same word if affix could not be removed.
            </returns>
            <remarks>
            	This method does not verify that the returned word is a valid word, only that the affix can be removed
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixUtility.RemoveSuffix(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry)">
            <summary>
                Removes the affix suffix rule entry for the word if valid
            </summary>
            <param name="word" type="string">
                <para>
                    The word to be modified
                </para>
            </param>
            <param name="entry" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Affix.AffixEntry">
                <para>
                    The affix rule entry to use
                </para>
            </param>
            <returns>
                The word after affix removed.  Will be the same word if affix could not be removed.
            </returns>
            <remarks>
            	This method does not verify that the returned word is a valid word, only that the affix can be removed
            </remarks>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule">
            <summary>
            	This class hold the settings for a phonetic rule
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.BeginningOnly">
            <summary>
                True if this rule should be applied to the beginning only
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.Condition">
            <summary>
                The ascii condition array
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.ConditionCount">
            <summary>
                The number of conditions
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.ConsumeCount">
            <summary>
                The number of chars to consume with this rule
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.EndOnly">
            <summary>
                True if this rule should be applied to the end only
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.Priority">
            <summary>
                The priority of this rule
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.ReplaceMode">
            <summary>
                True if this rule should run in replace mode
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule.ReplaceString">
            <summary>
                The string to use when replacing
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection">
            <summary>
                A collection that stores 'PhoneticRule' objects.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.#ctor">
            <summary>
                Initializes a new instance of 'PhoneticRuleCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection)">
            <summary>
                Initializes a new instance of 'PhoneticRuleCollection' based on an already existing instance.
            </summary>
            <param name='Value'>
                A 'PhoneticRuleCollection' from which the contents is copied
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule[])">
            <summary>
                Initializes a new instance of 'PhoneticRuleCollection' with an array of 'PhoneticRule' objects.
            </summary>
            <param name='Value'>
                An array of 'PhoneticRule' objects with which to initialize the collection
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.Add(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule)">
            <summary>
                Adds a 'PhoneticRule' item with the specified value to the 'PhoneticRuleCollection'
            </summary>
            <param name='Value'>
                The 'PhoneticRule' to add.
            </param>
            <returns>
                The index at which the new element was inserted.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.AddRange(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule[])">
            <summary>
                Copies the elements of an array at the end of this instance of 'PhoneticRuleCollection'.
            </summary>
            <param name='Value'>
                An array of 'PhoneticRule' objects to add to the collection.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.AddRange(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection)">
            <summary>
                Adds the contents of another 'PhoneticRuleCollection' at the end of this instance.
            </summary>
            <param name='Value'>
                A 'PhoneticRuleCollection' containing the objects to add to the collection.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.Contains(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule)">
            <summary>
                Gets a value indicating whether the 'PhoneticRuleCollection' contains the specified value.
            </summary>
            <param name='Value'>
                The item to locate.
            </param>
            <returns>
                True if the item exists in the collection; false otherwise.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.CopyTo(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule[],System.Int32)">
            <summary>
                Copies the 'PhoneticRuleCollection' values to a one-dimensional System.Array
                instance starting at the specified array index.
            </summary>
            <param name='Array'>
                The one-dimensional System.Array that represents the copy destination.
            </param>
            <param name='Index'>
                The index in the array where copying begins.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.IndexOf(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule)">
            <summary>
                Returns the index of a 'PhoneticRule' object in the collection.
            </summary>
            <param name='Value'>
                The 'PhoneticRule' object whose index will be retrieved.
            </param>
            <returns>
                If found, the index of the value; otherwise, -1.
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.Insert(System.Int32,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule)">
            <summary>
                Inserts an existing 'PhoneticRule' into the collection at the specified index.
            </summary>
            <param name='Index'>
                The zero-based index where the new item should be inserted.
            </param>
            <param name='Value'>
                The item to insert.
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.GetEnumerator">
            <summary>
                Returns an enumerator that can be used to iterate through
                the 'PhoneticRuleCollection'.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.Remove(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule)">
            <summary>
                Removes a specific item from the 'PhoneticRuleCollection'.
            </summary>
            <param name='Value'>
                The item to remove from the 'PhoneticRuleCollection'.
            </param>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection.Item(System.Int32)">
            <summary>
                Represents the 'PhoneticRule' item at the specified index position.
            </summary>
            <param name='Index'>
                The zero-based index of the entry to locate in the collection.
            </param>
            <value>
                The entry at the specified index of the collection.
            </value>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator">
            <summary>
                A strongly typed enumerator for 'PhoneticRuleCollection'
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleCollection)">
            <summary>
                Enumerator constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.System#Collections#IEnumerator#MoveNext">
            <summary>
                Advances the enumerator to the next element of the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.Reset">
            <summary>
                Sets the enumerator to the first element in the collection
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.System#Collections#IEnumerator#Reset">
            <summary>
                Sets the enumerator to the first element in the collection
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.Current">
            <summary>
                Gets the current element from the collection (strongly typed)
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRuleEnumerator.System#Collections#IEnumerator#Current">
            <summary>
                Gets the current element from the collection
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticUtility">
            <summary>
            	This class holds helper methods for phonetic encoding
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticUtility.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticUtility.EncodeRule(System.String,RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule@)">
            <summary>
                Converts the rule text in to a PhoneticRule class
            </summary>
            <param name="ruleText" type="string">
                <para>
                    The text to convert
                </para>
            </param>
            <param name="rule" type="ref RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Phonetic.PhoneticRule">
                <para>
                    The object that will hold the conversion data
                </para>
            </param>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word">
            <summary>
            The Word class represents a base word in the dictionary
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.#ctor(System.String,System.Int32)">
            <summary>
                Initializes a new instance of the class
            </summary>
            <param name="value" type="string">
                <para>
                    The string for the base word
                </para>
            </param>
            <param name="editDistance" type="int">
                <para>
                    The edit distance from the misspelled word
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.#ctor(System.String,System.String,System.String)">
            <summary>
                Initializes a new instance of the class
            </summary>
            <param name="value" type="string">
                <para>
                    The string for the base word
                </para>
            </param>
            <param name="affixKeys" type="string">
                <para>
                    The affix keys that can be applied to this base word
                </para>
            </param>
            <param name="phoneticCode" type="string">
                <para>
                    The phonetic code for this word
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.#ctor(System.String,System.String)">
            <summary>
                Initializes a new instance of the class
            </summary>
            <param name="value" type="string">
                <para>
                    The string for the base word
                </para>
            </param>
            <param name="affixKeys" type="string">
                <para>
                    The affix keys that can be applied to this base word
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.#ctor(System.String)">
            <summary>
                Initializes a new instance of the class
            </summary>
            <param name="value" type="string">
                <para>
                    The string for the base word
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.CompareTo(System.Object)">
            <summary>
                Sorts a collection of words by EditDistance
            </summary>
            <remarks>
            	The compare sorts in desc order, largest EditDistance first
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.AffixKeys">
            <summary>
                The affix keys that can be applied to this base word
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.EditDistance">
            <summary>
                Used for sorting suggestions by its edit distance for 
                the misspelled word
            </summary>
            <remarks>
            	Internal use only
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.PhoneticCode">
            <summary>
                The phonetic code for this word
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word.Value">
            <summary>
                The string for the base word
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary">
            <summary>
            The WordDictionary class contains all the logic for managing the word list.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.#ctor">
            <summary>
                Initializes a new instance of the class
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.LoadUserFile">
            <summary>
                Loads the user dictionary file
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.SaveUserFile">
            <summary>
                Saves the user dictionary file
            </summary>
            <remarks>
            	If the file does not exist, it will be created
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.VerifyAffixKey(System.String,System.Char)">
            <summary>
                Verifies the base word has the affix key
            </summary>
            <param name="word" type="string">
                <para>
                    Base word to check
                </para>
            </param>
            <param name="affixKey" type="string">
                <para>
                    Affix key to check 
                </para>
            </param>
            <returns>
                True if word contains affix key
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Add(System.String)">
            <summary>
                Adds a word to the user list
            </summary>
            <param name="word" type="string">
                <para>
                    The word to add
                </para>
            </param>
            <remarks>
            	This method is only affects the user word list
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Clear">
            <summary>
                Clears the user list of words
            </summary>
            <remarks>
            	This method is only affects the user word list
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Contains(System.String)">
            <summary>
                Searches all contained word lists for word
            </summary>
            <param name="word" type="string">
                <para>
                    The word to search for
                </para>
            </param>
            <returns>
                Returns true if word is found
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.ExpandWord(RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word)">
            <summary>
                Expands an affix compressed base word
            </summary>
            <param name="word" type="RichTextBoxControl.NetSpell.SpellChecker.Dictionary.Word">
                <para>
                    The word to expand
                </para>
            </param>
            <returns>
                A System.Collections.ArrayList of words expanded from base word
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Initialize">
            <summary>
                Initializes the dictionary by loading and parsing the
                dictionary file and the user file.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.PhoneticCode(System.String)">
            <summary>
                Generates a phonetic code of how the word sounds
            </summary>
            <param name="word" type="string">
                <para>
                    The word to generated the sound code from
                </para>
            </param>
            <returns>
                A code of how the word sounds
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Remove(System.String)">
            <summary>
                Removes a word from the user list
            </summary>
            <param name="word" type="string">
                <para>
                    The word to remove
                </para>
            </param>
            <remarks>
            	This method is only affects the user word list
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.BaseWords">
            <summary>
                The collection of base words for the dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Copyright">
            <summary>
                Copyright text for the dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.DictionaryFile">
            <summary>
                The file name for the main dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.DictionaryFolder">
            <summary>
                Folder containing the dictionaries
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.DictionaryPath">
            <summary>
                Folder Path containing the dictionaries set from RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerDictionaryPath="C:\temp\dictionary\";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.DictionaryUrl">
            <summary>
                Folder containing the dictionaries set from RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerDictionaryUrl="/dictionary";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.EnableUserFile">
            <summary>
                Set this to true to automaticly create a user dictionary when
                a word is added.
            </summary>
            <remarks>
            	This should be set to false in a web environment
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Initialized">
            <summary>
                True if the dictionary has been initialized
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.PhoneticRules">
            <summary>
                Collection of phonetic rules for this dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.PrefixRules">
            <summary>
                Collection of affix prefixes for the base words in this dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.ReplaceCharacters">
            <summary>
                List of characters to use when generating suggestions using the near miss stratigy
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.SuffixRules">
            <summary>
                Collection of affix suffixes for the base words in this dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.TryCharacters">
            <summary>
                List of characters to try when generating suggestions using the near miss stratigy
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.UserFile">
            <summary>
                The file name for the user word list for this dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.CultureBehavior">
            <summary>
            This property can set the dictionary langauge to use when spelling for the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerCultureBehavior=CultureBehavior.ServerCurrentCulture;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.Language">
            <summary>
            This property can set the dictionary langauge to use when spelling for the RichTextBox
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.UserWords">
            <summary>
                List of user entered words in this dictionary
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Dictionary.WordDictionary.PossibleBaseWords">
            <summary>
                List of text saved from when 'Contains' is called. 
                This list is used to generate suggestions from if Contains
                doesn't find a word.
            </summary>
            <remarks>
            	These are not actual words.
            </remarks>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Forms.OptionForm">
            <summary>
            	The OptionForm is an internal form for setting the spell checker options
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Forms.OptionForm.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Spelling@)">
            <summary>
            	Default Constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Forms.OptionForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Forms.OptionForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Forms.SpellingForm">
            <summary>
            The SpellingForm is used to display suggestions when there is a misspelled word
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Forms.SpellingForm.#ctor(RichTextBoxControl.NetSpell.SpellChecker.Spelling)">
            <summary>
                Default Constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Forms.SpellingForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.Rtf2Html">
            <summary>
            Summary description for Rtf2Html.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfCommand">
            <summary>
            Summary description for RtfCommand.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfConverter">
            <summary>
            Summary description for RtfToHtml.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Rtf.RtfConverter.#ctor(System.String)">
            <summary>
            RTF Converter from String to RTF
            </summary>
            <param name="text">string</param>
        </member>
        <member name="M:RichTextBoxControl.Rtf.RtfConverter.ToHtml">
            <summary>
            RTF Converter from RTF to HTML
            </summary>
            <returns>string</returns>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfDocument">
            <summary>
            Summary description for RtfDocument.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfFormatContext">
            <summary>
            Summary description for RtfFormatContext.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfList">
            <summary>
            Summary description for RtfList.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfParagraph">
            <summary>
            Summary description for RtfParagraph.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfListItem">
            <summary>
            Summary description for RtdListItem.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfListNumber">
            <summary>
            Summary description for RtfListNumber.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfSection">
            <summary>
            Summary description for RtfSection.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfText">
            <summary>
            Summary description for RtfText.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Rtf.RtfTextDirection">
            <summary>
            Summary description for RtfTextDirection.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Rtf.RtfTextDirection.LeftToRight">
            <summary>
            Direction Left to Right
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Rtf.RtfTextDirection.RightToLeft">
            <summary>
            Direction Right to Left
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.AbstractToolbar">
            <summary>
            Summary description for AbstractToolbar.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.BackColor">
            <summary>Toolbar background color</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.BorderColor">
            <summary>Toolbar border color</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.BorderStyle">
            <summary>Toolbar border style</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.BorderWidth">
            <summary>Toolbar border width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonType">
            <summary>Toolbar button type</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonImagePath">
            <summary>Toolbar button image path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonImageWidth">
            <summary>Toolbar button image width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonImageHeight">
            <summary>Toolbar button image height</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonRolloversAreEnabled">
            <summary>Toolbar buttons have rollovers?</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ButtonCssClass">
            <summary>Toolbar button CSS class</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ColorPickerPath">
            <summary>Toolbar color picker path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.Enabled">
            <summary>Toolbar enabled?</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.EmoticonImagePath">
            <summary>Emoticon location</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.EmoticonNames">
            <summary>Emoticon names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.EmoticonList">
            <summary>Emoticon list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.FontForeColors">
            <summary>Font colors</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.FontForeColorNames">
            <summary>Font color names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.FontSizeList">
            <summary>Toolbar font sizes</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.FontList">
            <summary>Toolbar font list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.HelpUrl">
            <summary>Toolbar help URL</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ImageList">
            <summary>Toolbar image list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ImageMenuPath">
            <summary>Toolbar image menu path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ImageNames">
            <summary>Image names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.InsertNames">
            <summary>Insert names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.InsertList">
            <summary>Insert list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.HorizontalAlign">
            <summary>Horizontal align</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.HyperlinkList">
            <summary>Hyperlink list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.HyperlinkNames">
            <summary>Hyperlink menu</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.MenuCssClass">
            <summary>Menu CSS class</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.Layout">
            <summary>Toolbar layout</summary> 
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ParagraphList">
            <summary>Paragraph list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ParagraphNames">
            <summary>Paragraph names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.SeparatorImageWidth">
            <summary>Separator image width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.SeparatorImageHeight">
            <summary>Separator image height</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.Spacing">
            <summary>Toolbar spacing</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.Symbols">
            <summary>Symbols</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.StyleList">
            <summary>Style list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.StyleNames">
            <summary>Style names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.TableDefaultRows">
            <summary>Table default rows</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.TableDefaultColumns">
            <summary>Table default columns</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.AbstractToolbar.ToolbarErrorText">
            <summary>Toolbar error text</summary>
        </member>
        <member name="T:RichTextBoxControl.ButtonType">
            <summary>
            Specifies the way in which the toolbar is rendered. If set to Image, the buttons are
            rendered using bitmap images, and if set to Button the toolbar buttons are displayed
            using standard HTML form buttons.
            </summary>
            <example>
            <code>myRichTextBox.ButtonType = ButtonType.Image;</code>
            </example>
        </member>
        <member name="F:RichTextBoxControl.ButtonType.Image">
            <summary>
            Toolbar buttons on RichTextBox are displayed as bitmap images.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ButtonType.Button">
            <summary>
            Toolbar buttons on RichTextBox are displayed as form buttons.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.ColorsConverter">
            <summary>
            Converts string values in an ASPX file like "Red,Green,Blue" into an array of Color objects.
            This class is used to help enter data in an ASPX page for the <see cref="P:RichTextBoxControl.RichTextBox.FontColors"/>
            property.
            </summary>
            <seealso cref="P:RichTextBoxControl.RichTextBox.FontColors"/>
        </member>
        <member name="M:RichTextBoxControl.Common.ColorsConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ColorsConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ColorsConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Conversion of Color[] to string
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ColorsConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Conversion of Color[] to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:RichTextBoxControl.Config">
            <summary>
            Represents a custom configuration of the editor. These configurations are applied using
            <see cref="M:RichTextBoxControl.RichTextBox.QuickConfigure(RichTextBoxControl.Config)"/> and set properties on the
            editor. These options provide a rapid way of applying larger sets of changes to
            the editor.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Config.TableEditing">
            <summary>
            Enables the following buttons: Insert table, Insert table row, Insert table column, Delete table row, and Delete table column
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Config.Forum">
            <summary>
            Enables the following buttons and menus: Paragraph menu,Font menu,Font size menu,Font fore color menu,Font back color menu,bold,italic,leftjustify,centerjustify,rightjustify,bullets,cut,copy,paste,undo,redo,insert rule,help,emoticon menu
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Config.DisableAll">
            <summary>
            Disables all items on the toolbar, i.e. those specified in <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Config.EnableAll">
            <summary>
            Enables all items on the toolbar, i.e. those specified in <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Config.Minimal">
            <summary>
            Enables the following buttons and menus: bold,italic,left justify,center justify,right justify,insert link,bullets,cut,copy,paste,undo,redo
            </summary>
        </member>
        <member name="T:RichTextBoxControl.CultureBehavior">
            <summary>
            Specifies the way in which the control will be localized.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.CultureBehavior.CustomCulture">
            <summary>
            The custom language culture
            </summary>
        </member>
        <member name="F:RichTextBoxControl.CultureBehavior.ClientUICulture">
            <summary>
            The language settings from the clients browser Page.Request.UserLanguages[0]
            </summary>
        </member>
        <member name="F:RichTextBoxControl.CultureBehavior.ServerCurrentCulture">
            <summary>
            The System.Threading.Thread.CurrentThread.CurrentCulture.Name
            </summary>
        </member>
        <member name="F:RichTextBoxControl.CultureBehavior.ServerCurrentUICulture">
            <summary>
            The System.Threading.Thread.CurrentThread.CurrentUICulture.Name
            </summary>
        </member>
        <member name="T:RichTextBoxControl.DownlevelMode">
            <summary>
            Specifies the way the control appears in downlevel browsers.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.DownlevelMode.Document">
            <summary>
            The HTML in the document is sent straight to the browser. The HTML is not editable.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.DownlevelMode.Message">
            <summary>
            A custom message is shown to the user. Normally the message explains that the
            document can only be edited using Internet Explorer 5 or later.
            See <see cref="P:RichTextBoxControl.RichTextBox.DownlevelMessage"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.DownlevelMode.TextArea">
            <summary>
            The HTML document is displayed in a textarea tag. The user can edit the document by
            editing the HTML within the textarea tag. The dimensions of the textarea can be set
            explicitly using <see cref="P:RichTextBoxControl.RichTextBox.DownlevelCols"/> and
            <see cref="P:RichTextBoxControl.RichTextBox.DownlevelRows"/>.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.HtmlProcessor">
            <summary>
            Processes HTML documents
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.HtmlProcessor.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.HtmlProcessor.ProcessTo7Bit(System.String)">
            <summary>
            Processes HTML from IE into HTML that does not use anything other than 7bit characters. 
            ie. It changes many characters into numeric entities.
            </summary>
            <param name="input">HTML Document</param>
            <returns>HTML Document</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.HtmlProcessor.StripJavaScript(System.String)">
            <summary>
            Processes HTML from IE into HTML that does not contain any &lt;SCRIPT&gt; elements
            or other script content.
            </summary>
            <param name="input">HTML Document</param>
            <returns>HTML Document</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.HtmlProcessor.ProcessToXhtml(System.String)">
            <summary>
            Processes HTML from IE into HTML that more closely resembles XHTML. It changes the
            tags and attribute names to lower case and adds quotes to attributes
            </summary>
            <param name="s">HTML document</param>
            <returns>HTML document</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.HtmlProcessor.ProcessToPlainText(System.String)">
            <summary>
            Takes an HTML document and creates a plain text version of it. It strips scripot, strips HTML tags and
            replaces a number of tags like P and BR with carriage returns to retain basic formatting.
            </summary>
            <param name="html">HTML document</param>
            <returns>HTML document</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RTBUrlReplacer.#ctor(System.Web.HttpContext)">
            <summary>
            RTBUrlReplacer constructor. Setting up base Uri to Urls replacement.
            </summary>
            <param name="current">HttpContext of the current request</param>
        </member>
        <member name="M:RichTextBoxControl.Common.RTBUrlReplacer.ChangeAbsoluteURLsToRelative(System.String)">
            <summary>
            Swaps absolute URLs to relative ones for the current hostname only
            </summary>
            <param name="html">The HTML document</param>
            <returns>HTML document</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RTBUrlReplacer.ChangeRelativeURLsToAbsolute(System.String)">
            <summary>
            Swaps relative URLs to absolute ones for the current hostname only
            </summary>
            <param name="html">The HTML document</param>
            <returns>HTML document</returns>
        </member>
        <member name="P:RichTextBoxControl.Common.RTBUrlReplacer.Host">
            <summary>
            Return current request host name
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.RTBUrlReplacer.Port">
            <summary>
            Return current request port
            </summary>
        </member>
        <member name="T:RichTextBoxControl.ImageUpload">
            <summary>
            Summary description for ImageUpload.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ImageUpload.OnLoad(System.EventArgs)">
            <summary>
            OnLoad
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.ImageUpload.CreateChildControls">
            <summary>
            CreateChildControls
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ImageUpload.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:RichTextBoxControl.ImageUpload.OnPreRender(System.EventArgs)">
            <summary>
            OnPreRender
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RichTextBoxControl.ImageUpload.FileLimitSize">
            <summary>
            Sets and gets upload file limit.
            </summary>
            <value>Default value is 100000 butes</value>
        </member>
        <member name="T:RichTextBoxControl.Common.IToolbar">
            <summary>
            Summary description for Toolbar.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.EnableItem(System.String)">
            <summary>
            Enables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.DisableItem(System.String)">
            <summary>
            Disables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new client-script toolbar button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="onclick">Button client-side onclick function name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.Add(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new URL hyperlink button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="url">Hyperlink URL</param>
            <param name="target">Hyperlink target frame</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.Add(RichTextBoxControl.ToolbarButton)">
            <summary>
            Adds the specified toolbar button to the toolbar
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.Add(RichTextBoxControl.ToolbarMenu)">
            <summary>
            Adds the specified toolbar menu to the toolbar
            </summary>
            <param name="menu">Toolbar menu</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.Build(System.String)">
            <summary>
            Initialize the toolbar data structures
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.CommandIsInLayout(System.String)">
            <summary>
            Returns a value indicating whether the named toolbar element is in the
            ToolbarLayout value
            </summary>
            <param name="name">The toolbar elemment name</param>
            <returns>A boolean representing whether the item is in the layout</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.SetTitle(System.String,System.String)">
            <summary>
            Sets the title of the names toolbar element
            </summary>
            <param name="key">The toolbar element's name</param>
            <param name="title">The toolbar element's title</param>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.CreateControls(System.String)">
            <summary>
            Creates the Control hierarchy for the toolbar
            </summary>
            <param name="documentID">RichTextBox ID</param>
            <returns>A container Control</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.IToolbar.GetScript">
            <summary>
            Returns a string containing all the script functions that needs to be added to the page
            for the toolbar to function correctly
            </summary>
            <returns>Script string</returns>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.BackColor">
            <summary>Toolbar background color</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.BorderColor">
            <summary>Toolbar border color</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.BorderStyle">
            <summary>Toolbar border style</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.BorderWidth">
            <summary>Toolbar border width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonType">
            <summary>Toolbar button type</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonImagePath">
            <summary>Toolbar button image path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonImageWidth">
            <summary>Toolbar button image width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonImageHeight">
            <summary>Toolbar button image height</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonRolloversAreEnabled">
            <summary>Toolbar buttons have rollovers?</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ButtonCssClass">
            <summary>Toolbar button CSS class</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ColorPickerPath">
            <summary>Toolbar color picker path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.Enabled">
            <summary>Toolbar enabled?</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.EmoticonImagePath">
            <summary>Emoticon location</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.EmoticonNames">
            <summary>Emoticon names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.EmoticonList">
            <summary>Emoticon list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.FontForeColors">
            <summary>Font colors</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.FontForeColorNames">
            <summary>Font color names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.FontSizeList">
            <summary>Toolbar font sizes</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.FontList">
            <summary>Toolbar font list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.HelpUrl">
            <summary>Toolbar help URL</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ImageList">
            <summary>Toolbar image list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ImageMenuPath">
            <summary>Toolbar image menu path</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ImageNames">
            <summary>Image names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.InsertNames">
            <summary>Insert names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.InsertList">
            <summary>Insert list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.HorizontalAlign">
            <summary>Horizontal align</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.HyperlinkList">
            <summary>Hyperlink list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.HyperlinkNames">
            <summary>Hyperlink menu</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.MenuCssClass">
            <summary>Menu CSS class</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.Layout">
            <summary>Toolbar layout</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ParagraphList">
            <summary>Paragraph list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ParagraphNames">
            <summary>Paragraph names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.SeparatorImageWidth">
            <summary>Separator image width</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.SeparatorImageHeight">
            <summary>Separator image height</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.Spacing">
            <summary>Toolbar spacing</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.Symbols">
            <summary>Symbols</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.StyleList">
            <summary>Style list</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.StyleNames">
            <summary>Style names</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.TableDefaultRows">
            <summary>Table default rows</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.TableDefaultColumns">
            <summary>Table default columns</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.ToolbarErrorText">
            <summary>Toolbar error text</summary>
        </member>
        <member name="P:RichTextBoxControl.Common.IToolbar.Item(System.String)">
            <summary>
            Returns the toolbar element for the specified key name
            </summary>
        </member>
        <member name="T:LicenseVariables">
            <summary>
            LicenseTypes:Evaluation,Developer
            Product Id's Starts with 2001 :
            
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.ListConverter">
            <summary>
            Converts string values in an ASPX file like "1,2,3" into an array of strings.
            </summary>
            <seealso cref="P:RichTextBoxControl.RichTextBox.FontColors"/>
        </member>
        <member name="M:RichTextBoxControl.Common.ListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            CanConvertFrom
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            ConvertFrom
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Conversion of string[] to string
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Conversion of string[] to string
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:RichTextBoxControl.Common.MSToolbar">
            <summary>
            Summary description for Toolbar.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.#ctor(System.Web.UI.StateBag,RichTextBoxControl.AssemblyResourceManager)">
            <summary>
            Public constructor
            </summary>
            <param name="vs"></param>
            <param name="resources"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.EnableItem(System.String)">
            <summary>
            Enables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.DisableItem(System.String)">
            <summary>
            Disables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new client-script toolbar button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="onclick">Button client-side onclick function name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Add(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new URL hyperlink button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="url">Hyperlink URL</param>
            <param name="target">Hyperlink target frame</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Add(RichTextBoxControl.ToolbarButton)">
            <summary>
            Adds the specified toolbar button to the toolbar
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Add(RichTextBoxControl.ToolbarMenu)">
            <summary>
            Adds the specified toolbar menu to the toolbar
            </summary>
            <param name="menu">Toolbar menu</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Get(System.String)">
            <summary>
            Provides access to a named toolbar element
            </summary>
            <param name="name">The name of the toolbar item</param>
            <returns>The toolbar element</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.AddToToolbar(RichTextBoxControl.Common.ToolbarElement)">
            <summary>
            Adds a new element to the toolbar
            </summary>
            <param name="element">The toolbar element</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.Build(System.String)">
            <summary>
            Initialize the toolbar data structures
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.CommandIsInLayout(System.String)">
            <summary>
            Returns a value indicating whether the named toolbar element is in the
            ToolbarLayout value
            </summary>
            <param name="name">The toolbar elemment name</param>
            <returns>A boolean representing whether the item is in the layout</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.SetTitle(System.String,System.String)">
            <summary>
            Sets the title of the names toolbar element
            </summary>
            <param name="key">The toolbar element's name</param>
            <param name="title">The toolbar element's title</param>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.CreateControls(System.String)">
            <summary>
            Creates the Control hierarchy for the toolbar
            </summary>
            <param name="documentID">RichTextBox ID</param>
            <returns>A container Control</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.MSToolbar.GetScript">
            <summary>
            Returns a string containing all the script functions that needs to be added to the page
            for the toolbar to function correctly
            </summary>
            <returns>Script string</returns>
        </member>
        <member name="P:RichTextBoxControl.Common.MSToolbar.Item(System.String)">
            <summary>
            Returns the toolbar element for the specified key name
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.MSToolbar.ClientID">
            <summary>
            Gets the ID of the RichTextBox on the client
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.NSToolbar">
            <summary>
            Summary description for Toolbar.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.#ctor(System.Web.UI.StateBag,RichTextBoxControl.AssemblyResourceManager)">
            <summary>
            Public constructor
            </summary>
            <param name="vs"></param>
            <param name="resources"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.EnableItem(System.String)">
            <summary>
            Enables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.DisableItem(System.String)">
            <summary>
            Disables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new client-script toolbar button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="onclick">Button client-side onclick function name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Add(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new URL hyperlink button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="url">Hyperlink URL</param>
            <param name="target">Hyperlink target frame</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Add(RichTextBoxControl.ToolbarButton)">
            <summary>
            Adds the specified toolbar button to the toolbar
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Add(RichTextBoxControl.ToolbarMenu)">
            <summary>
            Adds the specified toolbar menu to the toolbar
            </summary>
            <param name="menu">Toolbar menu</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Get(System.String)">
            <summary>
            Provides access to a named toolbar element
            </summary>
            <param name="name">The name of the toolbar item</param>
            <returns>The toolbar element</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.AddToToolbar(RichTextBoxControl.Common.ToolbarElement)">
            <summary>
            Adds a new element to the toolbar
            </summary>
            <param name="element">The toolbar element</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.Build(System.String)">
            <summary>
            Initialize the toolbar data structures
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.CommandIsInLayout(System.String)">
            <summary>
            Returns a value indicating whether the named toolbar element is in the
            ToolbarLayout value
            </summary>
            <param name="name">The toolbar elemment name</param>
            <returns>A boolean representing whether the item is in the layout</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.SetTitle(System.String,System.String)">
            <summary>
            Sets the title of the names toolbar element
            </summary>
            <param name="key">The toolbar element's name</param>
            <param name="title">The toolbar element's title</param>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.CreateControls(System.String)">
            <summary>
            Creates the Control hierarchy for the toolbar
            </summary>
            <param name="documentID">RichTextBox ID</param>
            <returns>A container Control</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.NSToolbar.GetScript">
            <summary>
            Returns a string containing all the script functions that needs to be added to the page
            for the toolbar to function correctly
            </summary>
            <returns>Script string</returns>
        </member>
        <member name="P:RichTextBoxControl.Common.NSToolbar.Item(System.String)">
            <summary>
            Returns the toolbar element for the specified key name
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.NSToolbar.ClientID">
            <summary>
            Gets the ID of the RichTextBox on the client
            </summary>
        </member>
        <member name="T:RichTextBoxControl.WMFile">
            <summary>
            Summary description for WMfile.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.PasteMode">
            <summary>
            Specifies the manner in which the editor handles pasted text. Use this option to specify if formatting
            is stripped when text is pasted into the editor.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.PasteMode.Normal">
            <summary>
            When you paste text into the editor it is not processed in any way.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.PasteMode.StripFormatting">
            <summary>
            When you paste text into the editor, all HTML formatting is stripped. This option is ideal
            for content management systems where you want absolute control over the formatting.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.BreakMode">
            <summary>
            Lists the buttons and menus that are available on the toolbar.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.BreakMode.LineBreak">
            <summary>
            Specifies that when the end-user presses the Return key in the editor a line-break (br tag)
            is inserted rather than a paragraph break (p tag)
            </summary>
        </member>
        <member name="F:RichTextBoxControl.BreakMode.ParagraphBreak">
            <summary>
            Specifies that when the end-user presses the Return key in the editor a paragraph-break (p tag)
            is inserted into the document
            </summary>
        </member>
        <member name="T:RichTextBoxControl.TextChangedEventHandler">
            <summary>
            This describes the event handler for when the text has changed.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.SavedEventHandler">
            <summary>
            This describes the event handler for when the text has saved.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.RichTextBox">
            <summary>
            <p>
            RichTextBox is an ASP.NET server control that works in much the same
            way as the standard TextBox control, but provides the ability for the user to
            edit the text using a variety of formatting options including bold, italic, underline,
            justification, hyperlinks, fonts and paragraph styles.
            </p>
            <p>
            RichTextBox provides an easy way to implement formatted text editing on a web site
            and this documentation should provide everything you need to customise the control
            for your particular application.
            </p>
            </summary>
            <example>
            <p>test.aspx:</p>
            <code>&lt;ui:RichTextBox id="myRichTextBox"&gt;&lt;/ui:RichTextBox&gt;</code>
            <p>test.aspx.cs:</p>
            <code>myrichTextBox.ToolbarVerticalAlign = VerticalAlign.Bottom;</code>
            <code>myRichTextBox.DisableToolbarItem(ToolbarItem.FontMenu);</code>
            <code>myRichTextBox.HtmlOptionIsEnabled = false;</code>
            <p>
            <code>string myText = myRichTextBox.Text;</code>
            </p>
            </example>
            <remarks>
            <p>RichTextBox is displayed in Internet Explorer 5 and later using an editable IFRAME and
            is implemented using several hundred lines of HTML and JavaScript which is generated
            depending on the configuration you have chosen using the methods and properties
            on the object.
            </p>
            <p>
            As Internet Explorer is currently the only browser supporting this functionality, the
            formatted text editing is only available in Internet Explorer 5.0 and above. If the
            visitor to the site uses a different web browser (e.g. Navigator, or Opera) they will
            instead see a TEXTAREA displaying the HTML.
            </p>
            <p>
            By default RichTextBox uses images for the buttons on the editor. To ensure these
            images are displayed correctly, copy the "images" folder provided with the control
            into your web site so that the "images" folder sits next to the page that implements
            the RichTextBox. If you want to relocate the images to another folder or site,
            you can do that using <see cref="P:RichTextBoxControl.RichTextBox.ButtonImagePath"/>.
            </p>
            </remarks>
            
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.OnTextChange(System.EventArgs)">
            <summary>
            This invokes the text changed event.  This is called whenever the text is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.OnTextSave(System.EventArgs)">
            <summary>
            This invokes the text changed event.  This is called whenever the text is changed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.#ctor">
            <summary>
            RichTextBox public constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.OnInit(System.EventArgs)">
            <summary>
            Initialize the RichTextBox. 
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.ProcessWebPath(System.String)">
            <summary>
            Performs some tidy-up on URLs used as property values
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.GetEditor">
            <summary>
            Gets the editor portion of the control (excl the toolbar 
            and chrome)
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.GetScript_Initialization">
            <summary>
            Returns script which calls the RTB_Setup_XXX client-side function
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.EnsureFormTagParent">
            <summary>
            Checks to ensure that this control is contained within a server side form
            tag. If not, an exception is thrown.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.GetDownlevelMessage">
            <summary>
            Returns a message that is displayed if the RichTextBox is used in an evaluation
            state. The text explains the actions the user needs to take to remedy the
            problem.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.CreateControls">
            <summary>
            Builds the control hierarchy for the RichTextBox by assembling together all
            the component parts of the control.
            This method builds everything inside of the outer TABLE tag
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.SetToolbarDefaults">
            <summary>
            Configures the default enabled/disabled and title settings for the toolbar buttons and menus.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.SetTitles">
            <summary>
            Replaces the default toolbar strings with the user-supplied strings
            See SetToolbarItemTitle() for how each string gets set
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.SetToolbarItemTitle(RichTextBoxControl.ToolbarItem,System.String)">
            <summary>
            Sets the displayable name for the specified toolbar button or menu. For menus this text
            is shown at the top of the menu. For buttons it is either shown on the button (for web form
            buttons), or as an ALT tag on image buttons.
            </summary>
            <param name="item">The toolbar item to be affected</param>
            <param name="title">The new title for the toolbar item</param>
            <example>
            <code>myRichTextBox.SetToolbarItemTitle(ToolbarItem.FontMenu,"Pick a Font");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.LoadRtf(System.IO.Stream)">
            <summary>
            This method can be used to set the text of the control to an RTF document from
            a stream when the control is first displayed. 
            </summary>
            <param name="s">The stream from which to load the RTF document</param>
            <example>
            <code>myRichTextBox.LoadRtf(stream);</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.LoadRtf(System.String)">
            <summary>
            This method can be used to set the text of the control to an RTF document from
            a file when the control is first displayed.
            </summary>
            <param name="filename">The RTF file to load into the RichTextBox</param>
            <example>
            <code>myRichTextBox.LoadRtf(@"c:\document.rtf");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.LoadHtml(System.IO.Stream)">
            <summary>
            This method can be used to set the text of the control to an HTML document from
            a stream when the control is first displayed. The document is loaded with a UTF-8 encoding. To 
            load HTML from a string in memory, use the Text property. 
            </summary>
            <param name="s">The stream from which to load the HTML document</param>
            <example>
            <code>myRichTextBox.LoadHtml(stream);</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.LoadHtml(System.String)">
            <summary>
            This method can be used to set the text of the control to an HTML document from
            a file when the control is first displayed. The document is loaded with a UTF-8 encoding.
            </summary>
            <param name="filename">The file to load into RichTextBox</param>
            <example>
            <code>myRichTextBox.LoadHtml(@"c:\document.html");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.SaveHtml(System.String)">
            <summary>
            Saves the current document to the specified file. To specify the type of HTML that
            is output use the properties that start HtmlOutputxxx.
            </summary>
            <param name="filename">The file to save the HTML document to</param>
            <example>
            <code>myRichTextBox.SaveHtml(@"c:\document.html");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(RichTextBoxControl.ToolbarItem)">
            <summary>
            Turns off display of the specified toolbar button or menu. Note that you can also reconfigure
            the contents of the toolbar using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/> and for significant layout changes
            this is usually a better way to do it.
            </summary>
            <param name="item">The toolbar item to be disabled</param>
            <example>
            <code>myRichTextBox.DisableToolbarItem(ToolbarItem.CenterJustify);</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(System.String)">
            <summary>
            Turns off display of the specified toolbar button or menu. Note that you can also reconfigure
            the contents of the toolbar using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/> and for significant layout changes
            this is usually a better way to do it.
            </summary>
            <param name="item">The toolbar item to be disabled</param>
            <example>
            <code>myRichTextBox.DisableToolbarItem("centerjustify");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)">
            <summary>
            Turns on display of the specified toolbar button or menu. Note that you can also reconfigure
            the contents of the toolbar using the ToolbarLayout property and for significant layout changes
            this is usually a better way to do it.
            </summary>
            <param name="item">The toolbar item to be enabled</param>
            <example>
            <code>myRichTextBox.EnableToolbarItem(ToolbarItem.Bold);</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(System.String)">
            <summary>
            Turns on display of the specified toolbar button or menu. Note that you can also reconfigure
            the contents of the toolbar using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/> and for significant layout changes
            this is usually a better way to do it.
            </summary>
            <param name="item">The toolbar item to be enabled</param>
            <example>
            <code>myRichTextBox.EnableToolbarItem("bold");</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.QuickConfigure(RichTextBoxControl.Config)">
            <summary>
            Provides a mechanism for rapidly reconfiguring RichTextBox. For example to enable every toolbar button and
            menu, do this: <code>myRichTextBox.QuickConfigure(Config.EnableAll)</code>. Note that this method will
            affect properties of the editor, so it is usually best to call it before any other property or method.
            </summary>
            <param name="config">The required configuration</param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Handles the data posted back to the control after a form postback event.
            </summary>
            <param name="postDataKey">The control ID key</param>
            <param name="values">A collection of postback values</param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RaisePostBackEvent(System.String)">
            <summary>
            
            </summary>
            <param name="eventArgument"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.CreateToolbarButton(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a custom hyperlink toolbar button that can be enabled and disabled using <see cref="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and
            <see cref="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and moved around using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>. The Title of the button
            is shown on the tooltip when you roll over it.
            </summary>
            <param name="name">The identifying name for the button</param>
            <param name="title">The descriptive title of the button</param>
            <param name="url">The URL that this button links to</param>
            <param name="target">The target frame into which this page loads. For a new window, specify "_blank"</param>
            <example>
            <code>myRichTextBox.CreateToolbarButton("button","My button","http://www.RicherComponents.com","_blank")</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.CreateToolbarButton(System.String,System.String,System.String)">
            <summary>
            Creates a custom on-click toolbar button that can be enabled and disabled using <see cref="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and
            <see cref="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and moved around using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>. The Title of the button
            is shown on the tooltip when you roll over it.
            </summary>
            <param name="name">The identifying name for the button</param>
            <param name="title">The descriptive title of the button</param>
            <param name="onclick">The name of a client-side script function that executes when you click the button.
            The function must accept two parameters, the first is the iframe that contains the document in the editor,
            the second is a boolean that specifies if the editor is in HTML mode.
            </param>
            <example>
            <code>myRichTextBox.CreateToolbarButton("button","My button","clickFunction")</code>
            </example>
            <example>
            <code>function clickFunction(editorIframe,isInHtmlMode)
            {
              ...
            }
            </code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.CreateToolbarButton(RichTextBoxControl.ToolbarButton)">
            <summary>
            Creates a custom toolbar button that can be enabled and disabled using <see cref="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and
            <see cref="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and moved around using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>. The Title of the button
            is shown on the tooltip when you roll over it.
            </summary>
            <param name="button">The toolbar button</param>
            <example>
            <code>
            ToolbarButton button = new ToolbarButton("myButton");
            button.Title = "My button";
            ...
            myRichTextBox.CreateToolbarButton(myButton);</code>
            </example>
            <example>
            <code>function clickFunction(editorIframe,isInHtmlMode)
            {
              ...
            }
            </code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.CreateToolbarMenu(RichTextBoxControl.ToolbarMenu)">
            <summary>
            Creates a custom toolbar menu that can be enabled and disabled using <see cref="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and
            <see cref="M:RichTextBoxControl.RichTextBox.DisableToolbarItem(RichTextBoxControl.ToolbarItem)"/> and moved around using <see cref="P:RichTextBoxControl.RichTextBox.ToolbarLayout"/>. The Title of the menu
            is shown at the top.
            </summary>
            <param name="menu">The toolbar menu</param>
            <example>
            <code>
            ToolbarMenu menu = new ToolbarMenu("myMenu");
            menu.Title = "My menu";
            ...
            myRichTextBox.CreateToolbarMenu(myMenu);</code>
            </example>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RaisePostDataChangedEvent">
            <summary>
            RaisePostDataChangedEvent
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
            <summary>
            Overrides the same method in WebControl, except doesn't add the
            ClientID property as an ID attribute.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.OnLoad(System.EventArgs)">
            <summary>
            Oveerides WebControl.OnLoad
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.OnPreRender(System.EventArgs)">
            <summary>
            Handles the OnPreRender event and prepares the RichTextBox control for rendering. This
            method also generates all the client-side script code where appropriate.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderHtmlDialogs">
            <summary>
            Renders the HTML dialogs used by the toolbar buttons
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderEndTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the closing table tag, followed by the hidden form field,
            followed by the code copyright message
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderPasteMSWordSupport(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the necessary HTML for pasting content from MSWord
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderBeginTag(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the starting copyright message followed by the TABLE tag.
            Will also add absolute positioning attributes, back color, access key,
            tabindex and tooltip to the TABLE tag
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderCopyrightMessage(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the <!-- copyright --> message
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:RichTextBoxControl.RichTextBox.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the control tree to HTML
            </summary>
            <param name="output"></param>
        </member>
        <member name="E:RichTextBoxControl.RichTextBox.TextChange">
            <summary>
            Fires when <see cref="P:RichTextBoxControl.RichTextBox.Text"/> has been changed
            </summary>
        </member>
        <member name="E:RichTextBoxControl.RichTextBox.TextSave">
            <summary>
            Fires when <see cref="P:RichTextBoxControl.RichTextBox.Text"/> has been changed
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.TextXhtml">
            <summary>
            This property has been deprecated and behaves exactly the same as <see cref="P:RichTextBoxControl.RichTextBox.Text"/>.
            The output of that property closely resembles XHTML and you can specify the type of HTML that
            is output using the properties that start HtmlOutputxxx.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.WordLimitIsEnabled">
            <summary>
            Gets or sets a value indicating whether the WordsLimit should be enabled on the page
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.WordsLimitText">
            <summary>
            Gets or sets a text before word counter
            Default value is specified by culture
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.WordLimitCount">
            <summary>
            Gets or sets a words limit
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.AspxFileName">
            <summary>
            Gets or sets a aspx file name to edit
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.AscxFileName">
            <summary>
            Gets or sets a ascx file name to edit
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Visible">
            <summary>
            Gets or sets a value indicating whether the RichTextBox UI is displayed on the page
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Enabled">
            <summary>
            Gets or sets a value indicating whether the RichTextBox is enabled. If Enabled is set to
            false, the toolbar and HTML option are not displayed and the document is displayed in
            a read-only form where it cannot be altered. In this mode RichTextBox acts much like
            a document viewer.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ReturnKeyBehavior">
            <summary>
            Specifies whether the Return key inserts paragraph breaks or line breaks into the document
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.TableDefaultRows">
            <summary>
            Specifies the default number of rows for a new table.
            </summary>
            <example>
            <code>myRichTextBox.TableDefaultRows = 5;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.TableDefaultColumns">
            <summary>
            Specifies the default number of columns for a new table.
            </summary>
            <example>
            <code>myRichTextBox.TableDefaultColumns = 2;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorClientID">
            <summary>
            Returns the client-side ID of the iframe tag that contains the editor document. Use this property to
            extract the iframe ID and use it in client script to extend RichTextBox.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.InsertList">
            <summary>
            Specifies the text or HTML items that can be inserted using the Insert menu. You can specify the descriptive
            names of these elements using <see cref="P:RichTextBoxControl.RichTextBox.InsertNames"/>.
            </summary>
            <example>
            <code>myRichTextBox.InsertList = new string[] {"Copyright 2002-2003", "The No.1 content editor for ASP.NET"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.InsertNames">
            <summary>
            Specifies the descriptive names of the text/HTML items on the Insert menu. You can specify the actual
            text or HTML inserted using <see cref="P:RichTextBoxControl.RichTextBox.InsertList"/>.
            </summary>
            <example>
            <code>myRichTextBox.InsertNames = new string[] {"Copyright message", "Slogan"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EmoticonList">
            <summary>
            Specifies the filenames of a series of emoticon images
            </summary>
            <example>
            <code>myRichTextBox.EmoticonList = new string[] {"smiley.gif", "confused.gif"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EmoticonNames">
            <summary>
            Specifies the descriptive names for emoticons that are used in the Emoticon menu
            </summary>
            <example>
            <code>myRichTextBox.EmoticonNames = new string[] {"Smiley", "Confused"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HyperlinkList">
            <summary>
            Specifies a series of URLs that are applied using the Links menu. The text for each URL
            is specified using <see cref="P:RichTextBoxControl.RichTextBox.HyperlinkNames"/>.
            </summary>
            <example>
            <code>myRichTextBox.HyperlinkList = new string[] {"http://www.RicherComponents.com/", "http://www.microsoft.com/"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HyperlinkNames">
            <summary>
            Specifies the text for the hyperlinks on the Hyperlinks menu. The values are displayed
            in the menu, and also used as the link text in the anchor tag that is inserted.
            The URLs are specified using <see cref="P:RichTextBoxControl.RichTextBox.HyperlinkList"/>.
            </summary>
            <example>
            <code>myRichTextBox.HyperlinkNames = new string[] {"RichTextBox", "Microsoft"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.PasteAction">
            <summary>
            Specifies how the editor behaves when the end-user pastes content into it using the Paste button,
            the Ctrl-V short-cut or the context menu. This property can be used to specify that all
            formatting is removed from pasted text, making it ideal for controlling the types of formatting
            you allow.
            </summary>
            <example>
            <code>myRichTextBox.PasteAction = PasteMode.StripFormatting;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOutputChangeAbsoluteURLsToRelative">
            <summary>
            By default Internet Explorer converts all URLs in hyperlinks (anchor tags) and images (img tags)
            to absolute URLs. When this property is set to true (the default) RichTextBox takes all URLs
            in the document and if the hostname in the URL matches the current hostname the URL
            is taken back to a relative URL.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOutputChangeAbsoluteURLsToRelative = true;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOutputUseLowerCase">
            <summary>
            By default Internet Explorer stores HTML in upper case. When this property is set to
            true (the default) RichTextBox moves all HTML tagnames and attribute names to lower case
            in line with the XHTML standard.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOutputUseLowerCase = true;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOutputUseNumericCharacterReferences">
            <summary>
            When this property is set to
            true (the default) RichTextBox converts all non-7bit characters to numeric entities.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOutputUse7BitOnly = true;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOutputStripJavaScript">
            <summary>
            When this property is set to true (the default) RichTextBox strips all script elements and script
            contents from the html.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOutputStripJavaScript = true;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ImageMenuPath">
            <summary>
            Specifies the absolute or relative URL path to the folder that contains the images
            in the Image menu. If you want to set the path for the images used for the toolbar
            buttons, use <see cref="P:RichTextBoxControl.RichTextBox.ButtonImagePath"/>.
            </summary>
            <example>
            <code>myRichTextBox.ImageMenuPath = "document_images";</code>
            <code>myRichTextBox.ImageMenuPath = "/images";</code>
            <code>myRichTextBox.ImageMenuPath = "~/images";</code>
            <code>myRichTextBox.ImageMenuPath = "http://www.RicherComponents.com/images";</code>
            </example>
            <remarks>
            <p>This property defaults to looking for images at the path "~/images"</p>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ImageUploadPath">
            <summary>
            Specifies the absolute or relative URL path to the folder that used to upload an images/.
            </summary>
            <remarks>
            <p>This property defaults to uploading for images at the path "~/uploadimg/"</p>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ImageUploadUrl">
            <summary>
            This property can set the location of the ImageUpload.aspx form
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonImageWidth">
            <summary>
            Specifies the width, in pixels, of each of the buttons on the toolbar when image
            buttons are enabled
            </summary>
            <example>
            <code>myRichTextBox.ButtonImageWidth = 46;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonImageHeight">
            <summary>
            Specifies the height, in pixels, of each of the buttons on the toolbar when image
            buttons are enabled
            </summary>
            <example>
            <code>myRichTextBox.ButtonImageHeight = 44;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarVerticalAlign">
            <summary>
            Specifies where the toolbar appears in relation to the editable area.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarVerticalAlign = VerticalAlign.Bottom;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorWysiwygModeCss">
            <summary>
            Specifies the location of the stylesheet that will be used by the editable area when the editor
            is not in HTML mode.
            </summary>
            <example>
            <code>myRichTextBox.EditorWysiwygModeCss = "document.css";</code>
            </example>
            <remarks>
            Use this property to apply the same styling as is used on your site when the
            content is published. e.g. "wysiwyg.css"
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorHtmlModeCss">
            <summary>
            Specifies the location of the stylesheet that will be used by the editable area when the
            editor is in HTML mode. e.g. "html.css"
            </summary>
            <example>
            <code>myRichTextBox.EditorHtmlModeCss = "htmlmode.css";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorHtmlModeCssClass">
            <summary>
            Specifies the location of the stylesheet that will be used by the editable area when the
            editor is in HTML mode. e.g. "html.css"
            </summary>
            <example>
            <code>myRichTextBox.EditorHtmlModeCssClass = "myclass";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionText">
            <summary>
            Specifies the text that appears next to the checkbox that swaps the editor between 
            WYSIWYG mode and HTML mode.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionText = "Display HTML";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarIsEnabled">
            <summary>
            Specifies whether the toolbar should be displayed or not. Defaults to true.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarIsEnabled = false;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.BorderStyle">
            <summary>
            Specifies the style of border used around the outside of the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.BorderStyle = BorderStyle.Dashed;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.BorderWidth">
            <summary>
            Specifies the width of the border around the outside of the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.BorderWidth = 5;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.BorderColor">
            <summary>
            Specifies the color of the border around the outside of the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.BorderColor = Color.Black;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarLayout">
            <summary>
            <p>Configures which buttons and menus appear on the toolbar.</p>
            <p>
            For example a minmimal toolbar that includes two rows of menus/buttons can be defined
            with this string:
            "bold,separator,italic:fontmenu,insertlink"
            </p>
            <p>A (,) comma separates each toolbar item. A colon (:) separates each toolbar row.
            To insert a separator between items, use the "separator" identifier.</p>
            </summary>
            <example>
            <code>myRichTextBox.ToolbarLayout = "bold,separator,italic:fontmenu,insertlink";</code>
            </example>
            <remarks>
            If you would like to see a list of all available Toolbar items <see cref="T:RichTextBoxControl.ToolbarItem"/>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionHorizontalAlign">
            <summary>
            Specifies the horizontal alignment of the HTML checkbox that the user uses to
            set whether the editor is in WYSIWYG mode or editing mode.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionHorizontalAlign = HorizontalAlign.Left;</code>
            </example>
            <remarks>
            If the HTML option is displayed on the right of the RichTextBox the checkbox is
            displayed on the right side of the text, whereas normally it is displayed on the
            left of the checkbox.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionVerticalAlign">
            <summary>
            Specifies the vertical alignment of the HTML checkbox that the user uses to
            set whether the editor is in WYSIWYG mode or editing mode.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionVerticalAlign = VerticalAlign.Middle;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarHorizontalAlign">
            <summary>
            Specifies the horizontal positioning of the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarHorizontalAlign = HorizontalAlign.Right;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorBorderColor">
            <summary>
            Specifies the color of the border around the editable area of the RichTextBox.
            </summary>
            <example>
            <code>myRichTextBox.EditorBorderColor = Color.Green;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorBorderStyle">
            <summary>
            Specifies the style of border used around the outside of editable area of the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.EditorBorderStyle = BorderStyle.Double;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EditorBorderWidth">
            <summary>
            Specifies the width of the border around the editable area of the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.EditorBorderWidth = 5;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarBorderColor">
            <summary>
            Specifies the color of the border around the outer edges of the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarBorderColor = Color.Orange;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarBorderStyle">
            <summary>
            Specifies the style of border used around the outer edge of the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarBorderStyle = BorderStyle.Double;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarBorderWidth">
            <summary>
            Specifies the width of the border around the outer edge of the toolbar
            </summary>
            <example>
            <code>myRichTextBox.ToolbarBorderWidth = 5;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarSpacing">
            <summary>
            Specifies the number of pixels of space applied around each toolbar button and menu. If this
            property is set to zero, all buttons and menus will butt up against one another.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarSpacing = 3;</code>
            </example>
            <remarks>
            This property defaults to 1.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.DownlevelRows">
            <summary>
            Specifies the number of text rows used for the textarea that is displayed when the
            RichTextBox is displayed in browsers that do not support rich text editing.
            </summary>
            <example>
            <code>myRichTextBox.DownlevelRows = 10;</code>
            </example>
            <remarks>
            This property has no effect on how RichTextBox is displayed in Internet Explorer
            5 or later.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.DownlevelCols">
            <summary>
            Specifies the number of text columns used for the textarea that is displayed when the
            RichTextBox is displayed in browsers that do not support rich text editing.
            </summary>
            <example>
            <code>myRichTextBox.DownlevelCols = 80;</code>
            </example>
            <remarks>
            This property has no effect on how RichTextBox is displayed in Internet Explorer
            5 or later.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.DownlevelMessage">
            <summary>
            Specifies the message displayed to users of downlevel browsers if <see cref="P:RichTextBoxControl.RichTextBox.HtmlOptionIsEnabled"/>
            is set to false.
            </summary>
            <example>
            <code>richtext1.DownlevelMessage = "To edit this document you must use Internet Explorer 5.0 or later";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.DownlevelMode">
            <summary>
            Specifies the message displayed to users of downlevel browsers if <see cref="P:RichTextBoxControl.RichTextBox.HtmlOptionIsEnabled"/>
            is set to false.
            </summary>
            <example>
            <code>richtext1.DownlevelMessage = "To edit this document you must use Internet Explorer 5.0 or later";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionTextCssClass">
            <summary>
            Specifies the CSS class name used for the text of the HTML mode checkbox. By setting
            this property and creating an associated class in a stylesheet, it is possible
            to control how the text is displayed on the RichTextBox.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionTextCssClass = "htmltextstyle";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarAutoHideIsEnabled">
            <summary>
            Specifies whether the toolbar should be hidden from view when the user enables
            HTML view. If this property is set to false, the toolbar will remain in
            view and an error will be displayed if the user tries to apply formatting to the
            HTML source.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarAutoHideIsEnabled = false;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarErrorText">
            <summary>
            Specifies the error text displayed if the user clicks a button on the toolbar
            whilst in HTML mode. Note that this error can only occur if the
            ToolbarAutoHideIsEnabled property is set to false.
            </summary>
            <example>
            <code>richtext1.ToolbarErrorText = "Please turn off HTML view and try again";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonCssClass">
            <summary>
            Specifies the name of the CSS class used by the buttons on the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ButtonCssClass = "buttonstyle";</code>
            </example>
            <remarks>
            This property
            is useful when you have configured the ButtonType property to use form buttons rather
            than images, and you want to control the look and feel of the form buttons, for example
            to use a smaller font size.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.MenuCssClass">
            <summary>
            Specifies the name of the CSS class used by the menus on the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.MenuCssClass = "menustyle";</code>
            </example>
            <remarks>
            This property
            is useful to ensure that the menus on the editor make use of any cascading styles that you have
            applied to form elements elsewhere in the web application. It is designed to allow much greater
            consistency.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HelpUrl">
            <summary>
            Specifies the URL of the help page that opens when the user clicks the Help button
            on the toolbar
            </summary>
            <example>
            <code>myRichTextBox.HelpUrl = "buttonstyle";</code>
            </example>
            <remarks>
            To enable the Help button, use <see cref="M:RichTextBoxControl.RichTextBox.EnableToolbarItem(RichTextBoxControl.ToolbarItem)"/>.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarSeparatorImageWidth">
            <summary>
            Specifies the width in pixels of the image used as a separator in the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarSeparatorImageWidth = 10;</code>
            </example>
            <remarks>
            This property has no effect if <see cref="P:RichTextBoxControl.RichTextBox.ButtonType"/> is set to Button.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarSeparatorImageHeight">
            <summary>
            Specifies the height in pixels of the image used as a separator in the toolbar.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarSeparatorImageHeight = 44;</code>
            </example>
            <remarks>
            This property has no effect if <see cref="P:RichTextBoxControl.RichTextBox.ButtonType"/> is set to Button.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonRolloversAreEnabled">
            <summary>
            Enables or disables the rollovers on the image buttons. If this property is set
            to false, the image buttons do not change when the mouse pointer moves over them.
            </summary>
            <example>
            <code>myRichTextBox.ButtonRolloversAreEnabled = false;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Name">
            <summary>
            This property is an alias for the ID property and performs exactly the same function.
            </summary>
            <example>
            <code>myRichTextBox.Name = "myRichTextBox";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.TextPlain">
            <summary>
            Returns the text in the editable area, but with all HTML tags removed so it is human
            readable as plain text.
            </summary>
            <example>
            <code>string plainText = myRichTextBox.TextPlain;</code>
            </example>
            <remarks>
            If you want to store the document text in a database which is searchable, you can
            use the output of this property to create an HTML-free copy for indexing.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EnableViewState">
            <summary>
            Gets a value indicating that the control will persist its viewstate. This property
            is set to true and cannot be changed.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.FontColors">
            <summary>
            This property provides customisation for the Colors menu on the RichTextBox by specifying
            a list of colors that should be presented to the user.
            </summary>
            <example>
            <code>myRichTextBox.FontColors = new Color[] {Color.Red,Color.Green};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.FontColorNames">
            <summary>
            This property provides customisation for the names of the colors in the Colors menu
            on the RichTextBox.
            </summary>
            <example>
            <code>myRichTextBox.FontColorNames = new string[] {"Red","Green"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.SymbolsList">
            <summary>
            Specifies the XHTML entity codes for the items on the Symbols menu.
            </summary>
            <example>
            <code>
            myRichTextBox.SymbolsList = new string[] {"&amp;copy;","&amp;trade;,&amp;#169;"};
            </code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ParagraphList">
            <summary>
            This property provides customisation for the Paragraph menu on the RichTextBox.
            The property is set of strings listing paragraph formatting types coming from
            this set : "&lt;body&gt;,&lt;h1&gt;,&lt;h2&gt;,&lt;h3&gt;,&lt;h4&gt;,&lt;h5&gt;,&lt;h6&gt;,&lt;dir&gt;,&lt;menu&gt;,&lt;pre&gt;,&lt;address&gt;"
            </summary>
            <example>
            <code>myRichTextBox.ParagraphList = new string[] {"Heading 1", "Heading 2"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Font">
            <summary>
            This property is provided by .Net, but has no effect on RichTextBox
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ForeColor">
            <summary>
            This property is provided by .Net, but has no effect on RichTextBox
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ParagraphNames">
            <summary>
            <p>
            Specifies the names used to describe each of the paragraph styles in the Paragraph menu.
            The number of items in this array will generally be the same as the number in the ParagraphList
            property as there is a one-to-one mapping between the two.
            </p>
            <p>
            For example, using this property you can ensure that when "Heading 1" is available
            on the Paragraph menu, it is displayed as "Main Heading" rather than "Heading 1".</p>
            </summary>
            <examples>
            <code>myRichTextBox.ParagraphNames = new string[] {"Main Heading","Sub Heading"};</code>
            </examples>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ImageList">
            <summary>
            This property provides customisation for the Image menu on RichTextBox.
            The property is set of strings listing image filenames, e.g.
            "logo.gif", "photo1.jpg", "chart4.gif". From ASPX page, just comma separate
            each filename.
            </summary>
            <example>
            <code>myRichTextBox.ImageList = new string[] {"logo.gif", "photo1.jpg"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ImageNames">
            <summary>
            <p>
            Specifies the names used to describe each of the images in the Image menu.
            The number of items in this array will generally be the same as the number in the ImageList
            property as there is a one-to-one mapping between the two.
            </p>
            <p>
            For example, using this property you can ensure that when "logo.gif" is available
            on the Image menu, it is displayed as "Company logo" rather than "logo.gif".</p>
            </summary>
            <examples>
            <code>myRichTextBox.ImageNames = new string[] {"Company logo","Photograph"};</code>
            </examples>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.StyleNames">
            <summary>
            Specifies the names of the CSS styles displayed in the Style menu.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.StyleList">
            <summary>
            Specifies the CSS styles that appear in the Style menu
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.FontList">
            <summary>
            This property provides customisation for the Fonts menu on the RichTextBox.
            The property is a string containing a comma-delimited list of fonts coming from
            this set : "Arial,Comic Sans MS,Courier New,Tahoma,Times New Roman,Verdana"
            </summary>
            <example>
            <code>myRichTextBox.FontList = new string[] {"Comic Sans MS", "Courier New"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.FontSizeList">
            <summary>
            This property provides customisation for the Font Size menu on the RichTextBox.
            The property is a string containing a comma-delimited list of font sizes coming from
            this set : "1,2,3,4,5,6"
            </summary>
            <example>
            <code>myRichTextBox.FontSizeList = new string[] {"1","2","3"};</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonImagePath">
            <summary>
            Specifies the absolute or relative URL path to the folder that contains the images to be used
            for the image buttons.
            </summary>
            <example>
            <code>myRichTextBox.ButtonImagePath = "richtext_images";</code>
            <code>myRichTextBox.ButtonImagePath = "/images";</code>
            <code>myRichTextBox.ButtonImagePath = "~/images";</code>
            <code>myRichTextBox.ButtonImagePath = "http://www.RicherComponents.com/buttons";</code>
            </example>
            <remarks>
            <p>This property defaults to looking for button images at the relative path "~/images/standard/"</p>
            <p>If you want to specify the location of the images on the Image menu, <see cref="P:RichTextBoxControl.RichTextBox.ImageMenuPath"/></p>
            <p>You can specify the default ButtonImagePath in web.config by adding a line like this to the appSettings section:</p>
            <code>&lt;add key="RichTextBoxButtonImagePath" value="~/buttonimages" /&gt;</code>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.EmoticonImagePath">
            <summary>
            Specifies the absolute or relative URL path to the folder that contains the images to be used
            for the emoticons.
            </summary>
            <example>
            <code>myRichTextBox.EmoticonImagePath = "richtext_emoticon_images";</code>
            <code>myRichTextBox.EmoticonImagePath = "/images";</code>
            <code>myRichTextBox.EmoticonImagePath = "~/images";</code>
            <code>myRichTextBox.EmoticonImagePath = "http://www.RicherComponents.com/emoticons";</code>
            </example>
            <remarks>
            <p>This property defaults to looking for emoticon images at the relative path http://www.asp.net/Forums/skins/default/images/emotions/</p>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ColorPickerPath">
            <summary>
            Specifies the URL path to the color picker page.
            </summary>
            <example>
            <code>myRichTextBox.ColorPickerPath = "~/colorpicker.aspx"</code>
            </example>
            <remarks>
            <p>When this property is empty, RichTextBox defaults to using the in-built color picker dialog</p>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ToolbarBackColor">
            <summary>
            Sets the color of the background for the toolbar area.
            </summary>
            <example>
            <code>myRichTextBox.ToolbarBackColor = Color.Gray;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionBackColor">
            <summary>
            Sets the color of the background for the area occupied by the HTML checkbox. This area stretches
            from the left all the way across to the right.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionBackColor = Color.Tomato;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Width">
            <summary>
            Specifies the width of the RichTextBox control on the page.
            </summary>
            <example>
            <code>myRichTextBox.Width = new Unit("100%");</code>
            <code>myRichTextBox.Width = new Unit("200px");</code>
            </example>
            <seealso cref="P:RichTextBoxControl.RichTextBox.Height"/>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Height">
            <summary>
            Specifies the height of the RichTextBox control on the page.
            </summary>
            <example>
            <code>myRichTextBox.Height = new Unit("80%");</code>
            <code>myRichTextBox.Height = new Unit("500px");</code>
            </example>
            <remarks>
            This value specifies the height of the entire control, not just the editable area. This
            means that when the user puts the control into HTML View mode and the toolbar disappears
            the control does not resize.
            </remarks>
            <seealso cref="P:RichTextBoxControl.RichTextBox.Width"/>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.HtmlOptionIsEnabled">
            <summary>
            When this property is set to true, the toolbar includes an item that allows the
            user to turn on HTML view where they can edit the HTML of the text directly. If you
            want to prevent the user editing HTML directly, set this property to false.
            </summary>
            <example>
            <code>myRichTextBox.HtmlOptionIsEnabled = true;</code>
            </example>
            <remarks>
            This property also specifies what happens in a downlevel browser. If it is set to false,
            a message is displayed to users of downlevel browsers and they are unable to edit
            the HTML. The message can be altered using <see cref="P:RichTextBoxControl.RichTextBox.DownlevelMessage"/>.
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Focus">
            <summary>
            Specifies whether the editor grabs focus when the page loads. If this property is set to true then the 
            editor will take focus, if it is set to false it will not.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.ButtonType">
            <summary>
            If this property is set to true, the buttons on the boolbar are displayed using
            bitmap images. If it is set to false, the toolbar buttons are rendered using HTML
            form buttons, and thereby avoiding the need for image files.
            </summary>
            <example>
            <code>myRichTextBox.ButtonType = ButtonType.Button;</code>
            <code>myRichTextBox.ButtonType = ButtonType.Image;</code>
            </example>
            <remarks>
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Text">
            <summary>
            This property provides access to the text within the editable area of the RichTextBox
            control. It can be used to set the text when the control is first displayed and also
            to read out the text when a form has been submitted. To specify the type of HTML that
            is output use the properties that start HtmlOutputxxx.
            </summary>
            <example>
            <code>string myText = myRichTextBox.Text;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.TextRaw">
            <summary>
            This property provides access to the text within the editable area of the RichTextBox
            control as it is stored by Internet Explorer. You will normally use 
            <see cref="P:RichTextBoxControl.RichTextBox.Text"/> rather than this property.
            </summary>
            <example>
            <code>string myRawHtml = myRichTextBox.TextRaw;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.Culture">
            <summary>
            This property can set culture of the RichTextBox
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.SpellCheckerUrl">
            <summary>
            This property can set the location of the spellcheck.aspx form
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerUrl="/someplace";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.SpellCheckerDictionaryPath">
            <summary>
            This property can set the location Path of the dictionary folder
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerDictionaryPath="C:\temp\dictionary\";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.SpellCheckerDictionaryUrl">
            <summary>
            This property can set the location Path of the dictionary folder
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerDictionaryUrl="/dictionary";</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.SpellCheckerCultureBehavior">
            <summary>
            This property can set the dictionary language to use when spelling for the RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.SpellCheckerCultureBehavior=CultureBehavior.ServerCurrentCulture;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.UICultureBehavior">
            <summary>
            This property sets the behavior for determining how the current culture is chosen for the 
            RichTextBox
            </summary>
            <example>
            <code>myRichTextBox.UICultureBehavior=CultureBehavior.ServerCurrentCulture;</code>
            </example>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.RichEditingIsAvailable">
            <summary>
            Returns a boolean value indicating whether the editor will provide rich-text editing. This property
            returns true if the end-user loads the page using Internet Explorer 5.0 or later running on
            Windows or Mozilla 1.3 or later. You can alter how the editor behaves in downlevel browsers using <see cref="P:RichTextBoxControl.RichTextBox.DownlevelMode"/>.
            If the ClientTarget attribute on the @Page declaration has been set, this property will determine browser
            capabilities from the ClientTarget setting and machine.config, rather than the capabilities of the current
            web browser. For example, if ClientTarget="Uplevel" is specified, then ASP.Net 1.0 and 1.1 work as though the browser
            is Internet Explorer 4. Rich-text editing with RichTextBox is only designed to support Internet Explorer 
            5 and above and therefore will always render with rich-text editing disabled.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.IsIE">
            <summary>
            This property returns true if the end-user loads the page using Internet Explorer.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.RichTextBox.IsSupported">
            <summary>
            This property returns true if the end-user loads the page using browser with JS>=3.0
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Designer.RichTextBoxDesigner">
            <summary>
            Design-Time support for RichTextBox for Matrix, Visual Studio .NET, etc.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Designer.RichTextBoxDesigner.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Designer.RichTextBoxDesigner.GetDesignTimeHtml">
            <summary>
            Returns HTML to Visual Studio .NET to be rendered at design-time for RichTextBox
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Designer.RichTextBoxDesigner.GetHtml(RichTextBoxControl.RichTextBox)">
            <summary>
            Returns HTML to be rendered at design-time for the specified RichTextBox object
            </summary>
            <returns></returns>
        </member>
        <member name="T:RichTextBoxControl.RichTextBoxException">
            <summary>
            Thrown when RichTextBox raises and exception
            </summary>
        </member>
        <member name="M:RichTextBoxControl.RichTextBoxException.#ctor(System.String)">
            <summary>
            Creates a new RichTextBox exception with a simple message
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:RichTextBoxControl.Common.RichTextBoxScript">
            <summary>
            Summary description for RichTextBoxScript.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.#ctor">
            <summary>
            Singleton
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.GetScript_InitializeCaret(System.Boolean)">
            <summary>
            Gets the script which mvoes the cursor within a RTB to the top
            Has side-effect of changing the focus to the RTB.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.ProcessReturn">
            <summary>
            Creates a script function that processes a Return key press as a line break.
            </summary>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.OnKeyDown(System.String,System.Boolean)">
            <summary>
            Creates a client-side function that handles the onkeydown event in the editor.
            If the specified key is the Return key (13) then another function is called that
            processes that separately.
            </summary>
            <param name="editorID">The ID of the RichTextBox</param>
            <param name="lineBreaks"></param>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.Format(System.String)">
            <summary>
            Returns the client-side function that applies generic formatting commands to the
            editor including bold, italic, etc.
            </summary>
            <param name="toolbarErrorText">The error to be displayed if the editor is in HTML mode</param>
            <returns>A string of client-side script</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.TrancateData(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns the client-side function that copies the contents of the editor iframe into
            the hidden text field.
            </summary>
            <param name="clientID">The ID of the RichTextBox</param>
            <returns>Client-side script</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.CopyData(System.String)">
            <summary>
            Returns the client-side function that copies the contents of the editor iframe into
            the hidden text field.
            </summary>
            <param name="clientID">The ID of the RichTextBox</param>
            <returns>Client-side script</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.InsertTable">
            <summary>
            Returns the script necessary to insert a table into the editor. This function is used by
            the insert table button, the insert row button and the insert column button.
            </summary>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.GetBringOrder">
            <summary>
            Creates a generic client-side script that moves an object within the Z-Order
            </summary>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.GetGuidelines">
            <summary>
            Creates a generic client-side script that manage the toggling of guidelines
            </summary>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.GetRangeReference">
            <summary>
            Creates a generic client-side script that returns an object reference to the current
            range.
            </summary>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.OnPasteStripScript(System.String)">
            <summary>
            This constitutes the On Paste script when StripFormatting is turned off
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.OnPasteIE5(System.String)">
            <summary>
            Creates a script function that handles the paste event and if the editor is not
            in HTML mode, it strips all HTML formatting.
            </summary>
            <param name="id">The ID of the RichTextBox</param>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.OnPaste(System.String)">
            <summary>
            Creates a script function that handles the paste event and if the editor is not
            in HTML mode, it strips all HTML formatting.
            </summary>
            <param name="id">The ID of the RichTextBox</param>
            <returns>A script string</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.ChangeUrl(System.Boolean)">
            <summary>
            Script to change relative Url to absolute
            </summary>
            <param name="HtmlOutputChangeAbsoluteURLsToRelative">Define is script required</param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.HtmlMode(System.String)">
            <summary>
            Creates a script function that returns a boolean value for whether
            the editor is in HTML mode or not
            </summary>
            <param name="id">The ID of the RichTextBox</param>
            <returns>A string of script</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.CheckTag">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.SetChk(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.RichTextBoxScript.OpenSpellChecker(System.Web.UI.StateBag)">
            <summary>
            Creates the script needed to open the Spell Check popup window
            </summary>
            <returns>A string of script</returns>
        </member>
        <member name="T:RichTextBoxControl.SpellCheck">
            <summary>
            Summary description for SpellCheck.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.AddButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.IgnoreAllButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.IgnoreButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.ReplaceAllButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.ReplaceButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.SpellChecker_DoubledWord(System.Object,RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.SpellChecker_EndOfText(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.SpellChecker_MisspelledWord(System.Object,RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.CreateChildControls">
            <summary>
            CreateChildControls
            </summary>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.OnLoad(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.OnPreRender(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.Render(System.Web.UI.HtmlTextWriter)">
            <summary> 
            Render this control to the output parameter specified.
            </summary>
            <param name="output"> The HTML writer to write out to </param>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.SaveValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.LoadValues">
            <summary>
            
            </summary>
        </member>
        <member name="M:RichTextBoxControl.SpellCheck.RenderResource(System.String,System.String,System.String)">
            <summary>
            Renders a resource to the client
            </summary>
            <param name="key">Key for Page.RegisterClientScriptBlock()</param>
            <param name="resourceName">String Name for the Resource file</param>
            <param name="replaceId">String to replace text within the resource file</param>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.Controls">
            <summary>
            
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.IgnoreButtonText">
            <summary>
            The text to display on the IgnoreButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.IgnoreAllButtonText">
            <summary>
            The text to display on the IgnoreAllButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.AddButtonText">
            <summary>
            The text to display on the AddButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.ReplaceButtonText">
            <summary>
            The text to display on the ReplaceButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.ReplaceAllButtonText">
            <summary>
            The text to display on the ReplaceAllButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.FinishedButtonText">
            <summary>
            The text to display on the FinishedButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.CancelButtonText">
            <summary>
            The text to display on the CancelButton Button
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.DoubleWordText">
            <summary>
            The text to display on the DoubleWordEvent 
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.ExplanationText">
            <summary>
            The text to display for the ExplanationText
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.ChangeToText">
            <summary>
            The text to display for the Change To label
            </summary>
        </member>
        <member name="P:RichTextBoxControl.SpellCheck.SuggestionsText">
            <summary>
            The text to display for the Suggestions label
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Spelling">
            <summary>
            	The Spelling class encapsulates the functions necessary to check
            	the spelling of inputted text.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.OnDoubledWord(RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.OnEndOfText(System.EventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.OnMisspelledWord(RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs)">
            <summary>
                This is the method that is responsible for notifying
                receivers that the event occurred
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.#ctor">
            <summary>
                Initializes a new instance of the SpellCheck class
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.#ctor(System.ComponentModel.IContainer)">
            <summary>
                Required for Windows.Forms Class Composition Designer support
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CalculateWords">
            <summary>
                Calculates the words from the Text property
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CheckString(System.String)">
            <summary>
                Determines if the string should be spell checked
            </summary>
            <param name="characters" type="string">
                <para>
                    The Characters to check
                </para>
            </param>
            <returns>
                Returns true if the string should be spell checked
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.MarkHtml">
            <summary>
                Calculates the position of html tags in the Text property
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Reset">
            <summary>
                Resets the public properties
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.BadChar(System.Collections.ArrayList@)">
            <summary>
            	swap out each char one by one and try all the tryme
            	chars in its place to see if that makes a good word
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ExtraChar(System.Collections.ArrayList@)">
            <summary>
                try omitting one char of word at a time
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ForgotChar(System.Collections.ArrayList@)">
            <summary>
                try inserting a tryme character before every letter
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceChars(System.Collections.ArrayList@)">
            <summary>
                suggestions for a typical fault of spelling, that
            	differs with more, than 1 letter from the right form.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SwapChar(System.Collections.ArrayList@)">
            <summary>
                try swapping adjacent chars one by one
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.TwoWords(System.Collections.ArrayList@)">
            <summary>
                split the string into two pieces after every char
            	if both pieces are good words make them a suggestion
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.DeleteWord">
            <summary>
                Deletes the CurrentWord from the Text Property
            </summary>
            <remarks>
            	Note, calling ReplaceWord with the ReplacementWord property set to 
            	an empty string has the same behavior as DeleteWord.
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.EditDistance(System.String,System.String,System.Boolean)">
            <summary>
                Calculates the minimum number of change, inserts or deletes
                required to change firstWord into secondWord
            </summary>
            <param name="source" type="string">
                <para>
                    The first word to calculate
                </para>
            </param>
            <param name="target" type="string">
                <para>
                    The second word to calculate
                </para>
            </param>
            <param name="positionPriority" type="bool">
                <para>
                    set to true if the first and last char should have priority
                </para>
            </param>
            <returns>
                The number of edits to make firstWord equal secondWord
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.EditDistance(System.String,System.String)">
            <summary>
                Calculates the minimum number of change, inserts or deletes
                required to change firstWord into secondWord
            </summary>
            <param name="source" type="string">
                <para>
                    The first word to calculate
                </para>
            </param>
            <param name="target" type="string">
                <para>
                    The second word to calculate
                </para>
            </param>
            <returns>
                The number of edits to make firstWord equal secondWord
            </returns>
            <remarks>
            	This method automatically gives priority to matching the first and last char
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreAllWord">
            <summary>
                Ignores all instances of the CurrentWord in the Text Property
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreWord">
            <summary>
                Ignores the instances of the CurrentWord in the Text Property
            </summary>
            <remarks>
            	Must call SpellCheck after call this method to resume
            	spell checking
            </remarks>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceAllWord">
            <summary>
                Replaces all instances of the CurrentWord in the Text Property
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceAllWord(System.String)">
            <summary>
                Replaces all instances of the CurrentWord in the Text Property
            </summary>
            <param name="replacementWord" type="string">
                <para>
                    The word to replace the CurrentWord with
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceWord">
            <summary>
                Replaces the instances of the CurrentWord in the Text Property
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceWord(System.String)">
            <summary>
                Replaces the instances of the CurrentWord in the Text Property
            </summary>
            <param name="replacementWord" type="string">
                <para>
                    The word to replace the CurrentWord with
                </para>
            </param>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck(System.Boolean)">
            <summary>
            test
            </summary>
            <param name="start"></param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck">
            <summary>
                Spell checks the words in the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Text"/> property starting
                at the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/> position
            </summary>
            <returns>
                Returns true if there is a word found in the text 
                that is not in the dictionaries
            </returns>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck(System.Int32)">
            <summary>
                Spell checks the words in the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Text"/> property starting
                at the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/> position. This overload takes in the
                WordIndex to start checking from.
            </summary>
            <param name="startWordIndex" type="int">
                <para>
                    The index of the word to start checking from. 
                </para>
            </param>
            <returns>
                Returns true if there is a word found in the text 
                that is not in the dictionaries
            </returns>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck(System.String)">
            <summary>
                Spell checks the words in the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Text"/> property starting
                at the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/> position. This overload takes in the 
                text to spell check
            </summary>
            <param name="text" type="string">
                <para>
                    The text to spell check
                </para>
            </param>
            <returns>
                Returns true if there is a word found in the text 
                that is not in the dictionaries
            </returns>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck(System.String,System.Int32)">
            <summary>
                Spell checks the words in the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Text"/> property starting
                at the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/> position. This overload takes in 
                the text to check and the WordIndex to start checking from.
            </summary>
            <param name="text" type="string">
                <para>
                    The text to spell check
                </para>
            </param>
            <param name="startWordIndex" type="int">
                <para>
                    The index of the word to start checking from
                </para>
            </param>
            <returns>
                Returns true if there is a word found in the text 
                that is not in the dictionaries
            </returns>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex"/>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Suggest">
            <summary>
                Populates the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Suggestions"/> property with word suggestions
                for the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            </summary>
            <remarks>
            	<see cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.TestWord(System.String)"/> must have been called before calling this method
            </remarks>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Suggestions"/>
            <seealso cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.TestWord(System.String)"/>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.TestWord(System.String)">
            <summary>
                Checks to see if the word is in the dictionary
            </summary>
            <param name="word" type="string">
                <para>
                    The word to check
                </para>
            </param>
            <returns>
                Returns true if word is found in dictionary
            </returns>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="E:RichTextBoxControl.NetSpell.SpellChecker.Spelling.DoubledWord">
            <summary>
                This event is fired when word is detected two times in a row
            </summary>
        </member>
        <member name="E:RichTextBoxControl.NetSpell.SpellChecker.Spelling.EndOfText">
            <summary>
                This event is fired when the spell checker reaches the end of
                the text in the Text property
            </summary>
        </member>
        <member name="E:RichTextBoxControl.NetSpell.SpellChecker.Spelling.MisspelledWord">
            <summary>
                This event is fired when the spell checker finds a word that 
                is not in the dictionaries
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord">
            <summary>
                The current word being spell checked from the text property
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Dictionary">
            <summary>
                The WordDictionary object to use when spell checking
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreAllCapsWords">
            <summary>
                Ignore words with all capital letters when spell checking
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreHtml">
            <summary>
                Ignore html tags when spell checking
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreList">
            <summary>
                List of words to automatically ignore
            </summary>
            <remarks>
            	When <see cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreAllWord"/> is clicked, the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/> is added to this list
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.IgnoreWordsWithDigits">
            <summary>
                Ignore words with digits when spell checking
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.MaxSuggestions">
            <summary>
                The maximum number of suggestions to generate
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceList">
            <summary>
                List of words and replacement values to automatically replace
            </summary>
            <remarks>
            	When <see cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceAllWord"/> is clicked, the <see cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.CurrentWord"/> is added to this list
            </remarks>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplacementWord">
            <summary>
                The word to used when replacing the misspelled word
            </summary>
            <seealso cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceAllWord"/>
            <seealso cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ReplaceWord"/>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.ShowDialog">
            <summary>
                Determines if the spell checker should use its internal suggestions
                and options dialogs.
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellingForm">
            <summary>
                The internal spelling suggestions dialog form
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SuggestionMode">
            <summary>
                The suggestion strategy to use when generating suggestions
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Suggestions">
            <summary>
                An array of word suggestions for the correct spelling of the misspelled word
            </summary>
            <seealso cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Suggest"/>
            <seealso cref="M:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SpellCheck(System.Boolean)"/>
            <seealso cref="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.MaxSuggestions"/>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.Text">
            <summary>
                The text to spell check
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordCount">
            <summary>
                The number of words being spell checked
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.Spelling.WordIndex">
            <summary>
                WordIndex is the index of the current word being spell checked
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Spelling.DoubledWordEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Spelling.EndOfTextEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Spelling.MisspelledWordEventHandler">
            <summary>
                This represents the delegate method prototype that
                event receivers must implement
            </summary>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SuggestionEnum">
            <summary>
                The suggestion strategy to use when generating suggestions
            </summary>
        </member>
        <member name="F:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SuggestionEnum.PhoneticNearMiss">
            <summary>
                Combines the phonetic and near miss strategies
            </summary>
        </member>
        <member name="F:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SuggestionEnum.Phonetic">
            <summary>
                The phonetic strategy generates suggestions by word sound
            </summary>
            <remarks>
            	This technique was developed by the open source project ASpell.net
            </remarks>
        </member>
        <member name="F:RichTextBoxControl.NetSpell.SpellChecker.Spelling.SuggestionEnum.NearMiss">
            <summary>
                The near miss strategy generates suggestion by replacing, 
                removing, adding chars to make words
            </summary>
            <remarks>
                This technique was developed by the open source spell checker ISpell
            </remarks>
        </member>
        <member name="T:RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs">
            <summary>
                Class sent to the event handler when the DoubleWord or 
                MisspelledWord event occurs
            </summary>
        </member>
        <member name="M:RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
                Constructor used to pass in properties
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs.TextIndex">
            <summary>
                Text index of the WordEvent
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs.Word">
            <summary>
                Word that caused the WordEvent
            </summary>
        </member>
        <member name="P:RichTextBoxControl.NetSpell.SpellChecker.SpellingEventArgs.WordIndex">
            <summary>
                Word index of the WordEvent
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.Toolbar">
            <summary>
            Summary description for Toolbar.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.BackColor">
            <summary>Toolbar background color</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.BorderColor">
            <summary>Toolbar border color</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.BorderStyle">
            <summary>Toolbar border style</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.BorderWidth">
            <summary>Toolbar border width</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonType">
            <summary>Toolbar button type</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonImagePath">
            <summary>Toolbar button image path</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonImageWidth">
            <summary>Toolbar button image width</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonImageHeight">
            <summary>Toolbar button image height</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonRolloversAreEnabled">
            <summary>Toolbar buttons have rollovers?</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ButtonCssClass">
            <summary>Toolbar button CSS class</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ColorPickerPath">
            <summary>Toolbar color picker path</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.Enabled">
            <summary>Toolbar enabled?</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.EmoticonImagePath">
            <summary>Emoticon location</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.EmoticonNames">
            <summary>Emoticon names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.EmoticonList">
            <summary>Emoticon list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.FontForeColors">
            <summary>Font colors</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.FontForeColorNames">
            <summary>Font color names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.FontSizeList">
            <summary>Toolbar font sizes</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.FontList">
            <summary>Toolbar font list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.HelpUrl">
            <summary>Toolbar help URL</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ImageList">
            <summary>Toolbar image list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ImageMenuPath">
            <summary>Toolbar image menu path</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ImageNames">
            <summary>Image names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.InsertNames">
            <summary>Insert names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.InsertList">
            <summary>Insert list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.HorizontalAlign">
            <summary>Horizontal align</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.HyperlinkList">
            <summary>Hyperlink list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.HyperlinkNames">
            <summary>Hyperlink menu</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.MenuCssClass">
            <summary>Menu CSS class</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.Layout">
            <summary>Toolbar layout</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ParagraphList">
            <summary>Paragraph list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ParagraphNames">
            <summary>Paragraph names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.SeparatorImageWidth">
            <summary>Separator image width</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.SeparatorImageHeight">
            <summary>Separator image height</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.Spacing">
            <summary>Toolbar spacing</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.Symbols">
            <summary>Symbols</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.StyleList">
            <summary>Style list</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.StyleNames">
            <summary>Style names</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.TableDefaultRows">
            <summary>Table default rows</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.TableDefaultColumns">
            <summary>Table default columns</summary>
        </member>
        <member name="F:RichTextBoxControl.Common.Toolbar.ToolbarErrorText">
            <summary>Toolbar error text</summary>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.#ctor(System.Web.UI.StateBag,RichTextBoxControl.AssemblyResourceManager)">
            <summary>
            Public constructor
            </summary>
            <param name="vs"></param>
            <param name="resources"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.EnableItem(System.String)">
            <summary>
            Enables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.DisableItem(System.String)">
            <summary>
            Disables the specified toolbar element
            </summary>
            <param name="name">Toolbar element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new client-script toolbar button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="onclick">Button client-side onclick function name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Add(System.String,System.String,System.String,System.String)">
            <summary>
            Adds a new URL hyperlink button to the toolbar
            </summary>
            <param name="name">Button name</param>
            <param name="title">Button title</param>
            <param name="url">Hyperlink URL</param>
            <param name="target">Hyperlink target frame</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Add(RichTextBoxControl.ToolbarButton)">
            <summary>
            Adds the specified toolbar button to the toolbar
            </summary>
            <param name="button"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Add(RichTextBoxControl.ToolbarMenu)">
            <summary>
            Adds the specified toolbar menu to the toolbar
            </summary>
            <param name="menu">Toolbar menu</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Get(System.String)">
            <summary>
            Provides access to a named toolbar element
            </summary>
            <param name="name">The name of the toolbar item</param>
            <returns>The toolbar element</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.AddToToolbar(RichTextBoxControl.Common.ToolbarElement)">
            <summary>
            Adds a new element to the toolbar
            </summary>
            <param name="element">The toolbar element</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.Build(System.String)">
            <summary>
            Initialize the toolbar data structures
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.CommandIsInLayout(System.String)">
            <summary>
            Returns a value indicating whether the named toolbar element is in the
            ToolbarLayout value
            </summary>
            <param name="name">The toolbar elemment name</param>
            <returns>A boolean representing whether the item is in the layout</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.SetTitle(System.String,System.String)">
            <summary>
            Sets the title of the names toolbar element
            </summary>
            <param name="key">The toolbar element's name</param>
            <param name="title">The toolbar element's title</param>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.CreateControls(System.String)">
            <summary>
            Creates the Control hierarchy for the toolbar
            </summary>
            <param name="documentID">RichTextBox ID</param>
            <returns>A container Control</returns>
        </member>
        <member name="M:RichTextBoxControl.Common.Toolbar.GetScript">
            <summary>
            Returns a string containing all the script functions that needs to be added to the page
            for the toolbar to function correctly
            </summary>
            <returns>Script string</returns>
        </member>
        <member name="P:RichTextBoxControl.Common.Toolbar.Item(System.String)">
            <summary>
            Returns the toolbar element for the specified key name
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.Toolbar.ClientID">
            <summary>
            Gets the ID of the RichTextBox on the client
            </summary>
        </member>
        <member name="T:RichTextBoxControl.ToolbarButton">
            <summary>
            Represents a button on the editor toolbar
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.ToolbarElement">
            <summary>
            Summary description for ToolbarElement.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.ToolbarElement.ScriptBlock">
            <summary>
            Not for normal use.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.ToolbarElement.Title">
            <summary>
            The title of the toolbar element. This is displayed on the ALT tag of image buttons
            and the top-most item in drop-down menus.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.ToolbarElement.queryCommand">
            <summary>
            Whether the toolbar element must be checked for using
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.ToolbarElement.Enabled">
            <summary>
            Whether the toolbar element is enabled
            </summary>
        </member>
        <member name="F:RichTextBoxControl.Common.ToolbarElement.Default">
            <summary>
            Whether the toolbar element is one of the default elements. If this value is false then
            the element was created as a custom element.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarElement.#ctor(System.String)">
            <summary>
            Create a new toolbar element
            </summary>
            <param name="name">Element name</param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarElement.#ctor(System.String,System.Boolean)">
            <summary>
            Create a new toolbar element
            </summary>
            <param name="name">Element name</param>
            <param name="flag">Whether the element is a default element</param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarElement.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Create a new toolbar element
            </summary>
            <param name="name">Element name</param>
            <param name="flag">Whether the element is a default element</param>
            <param name="queryCommand">Whether the toolbar element must be checked for using</param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarElement.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Returns a Control hierarchy for the element
            </summary>
            <param name="buttonType">Toolbar button type</param>
            <param name="imagePath">Button image path</param>
            <param name="imageWidth">Button image width</param>
            <param name="imageHeight">Button image height</param>
            <param name="separatorWidth">Separator image width</param>
            <param name="separatorHeight">Separator image height</param>
            <param name="rollovers">Are button rollovers enabled?</param>
            <param name="buttoncss">CSS class name</param>
            <param name="menucss">CSS class name</param>
            <param name="imageType">Button image type (gif, jpg, etc)</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns></returns>
        </member>
        <member name="P:RichTextBoxControl.Common.ToolbarElement.Name">
            <summary>
            The name of the toolbar element
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.ToolbarElement.EditorQueryCommand">
            <summary>
            Whether the toolbar element must be checked for using
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarButton.ClientOnClickFunction">
            <summary>
            The script function that fires when this button is clicked. This function is passed two parameters.
            The first is the ID for the iframe that contains the document, the second is a boolean indicating whether
            the editor is in HTML mode. If you specify "myButtonHandler" for this property, then you must create a
            client-side function : <code>function myButtonHandler(editor,isHtmlMode</code>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarButton.HRef">
            <summary>
            Specifies the URL that will be navigated to when this button is clicked. Normally you would
            specify either this property or <see cref="F:RichTextBoxControl.ToolbarButton.ClientOnClickFunction"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarButton.Postback">
            <summary>
            Specifies whether this button will cause a postback. This configuration is used by the Save button
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarButton.PostbackArgs">
            <summary>
            Specifies whether this button will cause a postback with specified arguments.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarButton.Target">
            <summary>
            Specifies the target frame into which the page specified by <see cref="F:RichTextBoxControl.ToolbarButton.HRef"/> opens.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.#ctor(System.String)">
            <summary>
            Creates a new toolbar button
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new toolbar button
            </summary>
            <param name="name">Button name</param>
            <param name="flag">Whether this button is one of the default buttons</param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Create a new toolbar button
            </summary>
            <param name="name">Button name</param>
            <param name="flag">Whether the button is a default element</param>
            <param name="queryCommand">Whether the toolbar button must be checked for using</param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the button so it can be rendered
            </summary>
            <param name="buttonType">The toolbar button type</param>
            <param name="imagePath">The button image path</param>
            <param name="imageWidth">The button image width</param>
            <param name="imageHeight">The button image height</param>
            <param name="separatorWidth">The button separator image width</param>
            <param name="separatorHeight">The button separator image height</param>
            <param name="rollovers">Whether button rollovers are enabled</param>
            <param name="buttoncss">The button CSS class name</param>
            <param name="menucss">CSS class name</param>
            <param name="imageType">The type of image (gif, jpg, etc)</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Creates the button so it can be rendered
            </summary>
            <param name="type">The toolbar button type</param>
            <param name="path">The toolbar button image path</param>
            <param name="width">The toolbar image width</param>
            <param name="height">the toolbar image height</param>
            <param name="rollovers">Whether button image rollovers are enabled</param>
            <param name="css">The button CSS class name</param>
            <param name="imageType">The image type (gif, jpg, etc)</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.ToolbarButton.GetImageButton(System.String,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String)">
            <summary>
            Returns an image button that can be rendered
            </summary>
            <param name="path">The button image path</param>
            <param name="width">The button image width</param>
            <param name="height">The button image height</param>
            <param name="rollovers">Whether rolloevrs are enabled</param>
            <param name="css">the CSS class name</param>
            <param name="imageType">The image type (gif, jpg, etc)</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns></returns>
        </member>
        <member name="T:RichTextBoxControl.ToolbarItem">
            <summary>
            Lists the buttons and menus that are available on the toolbar.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Bold">
            <summary>
            A button to apply or remove bold formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Bullets">
            <summary>
            A button to apply or remove bullet list formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.CenterJustify">
            <summary>
            A button to apply center justification
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Copy">
            <summary>
            A button to copy the selected text to the clipboard
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Cut">
            <summary>
            A button to cut the selected text to the clipboard
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.DeleteColumn">
            <summary>
            A button to delete a column in a table
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.DeleteRow">
            <summary>
            A button to delete a row in a table
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.EmoticonMenu">
            <summary>
            A menu displaying a list of Emoticons, such as smiley faces. This menu can be customised
            using <see cref="P:RichTextBoxControl.RichTextBox.EmoticonList"/> and <see cref="P:RichTextBoxControl.RichTextBox.EmoticonNames"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontBackColorMenu">
            <summary>
            A menu displaying a series of typeface background colors. This menu can be customised
            using <see cref="P:RichTextBoxControl.RichTextBox.FontColors"/> and <see cref="P:RichTextBoxControl.RichTextBox.FontColorNames"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontBackColorPicker">
            <summary>
            A button to display a user-supplied color dialog for choosing the typeface background color
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontForeColorMenu">
            <summary>
            A menu displaying a series of typeface foreground colors. This menu can be customised
            using <see cref="P:RichTextBoxControl.RichTextBox.FontColors"/> and <see cref="P:RichTextBoxControl.RichTextBox.FontColorNames"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontForeColorPicker">
            <summary>
            A button to display a user-supplied color dialog for choosing the typeface foreground color
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontMenu">
            <summary>
            A menu displaying a series of typefaces. This menu can be customised using
            <see cref="P:RichTextBoxControl.RichTextBox.FontList"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FontSizeMenu">
            <summary>
            A menu displaying a series of typeface sizes using HTML font measurements (1-6)
            This menu can be customised using
            <see cref="P:RichTextBoxControl.RichTextBox.FontSizeList"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Help">
            <summary>
            A button to allow the user easy access to a help page describing how to use the editor.
            The page that opens when this button is clicked is set by <see cref="P:RichTextBoxControl.RichTextBox.HelpUrl"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.HyperlinkMenu">
            <summary>
            A menu displaying a series of hyperlinks for adding to the document. This menu can be customised
            using <see cref="P:RichTextBoxControl.RichTextBox.HyperlinkList"/> and <see cref="P:RichTextBoxControl.RichTextBox.HyperlinkNames"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Indent">
            <summary>
            A button to indent text
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertDate">
            <summary>
            A button that inserts today's date into the document. The date format used is the date format
            configured on the end user's machine.
            </summary>
            <remarks>
            Note that this button will appear in Internet Explorer 5.5 and later, but will appear in Internet Explorer 5.0.
            </remarks>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertTime">
            <summary>
            A button that inserts the current time into the document. The time format used is the time format
            configured on the end user's machine.
            </summary>
            <remarks>
            Note that this button will appear in Internet Explorer 5.5 and later, but will appear in Internet Explorer 5.0.
            </remarks>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertImage">
            <summary>
            A button to allow the insertion of images into the document
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertImageMenu">
            <summary>
            A menu containing a set of images that can be inserted into the document, Normally either this
            menu, or the InsertImage button would be used, not both. The images on this menu are specified
            using <see cref="P:RichTextBoxControl.RichTextBox.ImageList"/> and the names use to describe them are set using <see cref="P:RichTextBoxControl.RichTextBox.ImageNames"/>.
            The location of these images must be set using <see cref="P:RichTextBoxControl.RichTextBox.ImageMenuPath"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertLink">
            <summary>
            A button to allow the insertion of a hyperlink into the document
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertMenu">
            <summary>
            A menu displaying a series of HTML fragments for adding to the document. This menu can be customised
            using <see cref="P:RichTextBoxControl.RichTextBox.InsertList"/> and <see cref="P:RichTextBoxControl.RichTextBox.InsertNames"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertRule">
            <summary>
            A button to insert a horizontal rule into the document
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.EditTable">
            <summary>
            A button to edit an existing table in a dialog
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertTable">
            <summary>
            A button to insert a new table into the document
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertColumn">
            <summary>
            A button to insert a new column into the current table
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertRow">
            <summary>
            A button to insert a new row into the current table
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Italic">
            <summary>
            A button to apply or remove italic formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.LeftJustify">
            <summary>
            A button to justify text to the left
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.NumberedList">
            <summary>
            A button to apply or remove numbered list formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Outdent">
            <summary>
            A button to outdent text (i.e. remove an indent)
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.ParagraphMenu">
            <summary>
            A menu displaying a standard set of HTML paragraph styles, e.g. Heading 1 and Heading 2.
            This menu can be customised using
            <see cref="P:RichTextBoxControl.RichTextBox.ParagraphList"/> and <see cref="P:RichTextBoxControl.RichTextBox.ParagraphNames"/>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Paste">
            <summary>
            A button to paste text into the document from the clipboard
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Print">
            <summary>
            A button to open the Print dialog to send the document to a printer
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Redo">
            <summary>
            A button to redo the last action on the document that was undone using Undo
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.RightJustify">
            <summary>
            A button to justify text to the right
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Save">
            <summary>
            A button which posts the document back to the server
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Separator">
            <summary>
            A separator between two buttons or menus. This is displayed differently depending
            on the setting of <see cref="T:RichTextBoxControl.ButtonType"/>.
            </summary>
            <seealso cref="P:RichTextBoxControl.RichTextBox.ToolbarSeparatorImageHeight"/>
            <seealso cref="P:RichTextBoxControl.RichTextBox.ToolbarSeparatorImageWidth"/>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Strikethrough">
            <summary>
            A button to apply strikethrough formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.StyleMenu">
            <summary>
            A menu displaying a custom set of Cascading Style Sheet (CSS) styles classes. When
            a style is applied using this menu it will be rendered using the relevant style
            definition in the stylesheet specified by <see cref="P:RichTextBoxControl.RichTextBox.EditorWysiwygModeCss"/>.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Subscript">
            <summary>
            A button to apply subscript formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Superscript">
            <summary>
            A button to apply superscript formatting
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.SymbolMenu">
            <summary>
            A menu displaying a set of typeface symbols for using in the document.
            This menu can be customised using
            <see cref="P:RichTextBoxControl.RichTextBox.SymbolsList"/>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Underline">
            <summary>
            A button to apply or remove an underline
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.Undo">
            <summary>
            A button to undo the last action on the document
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.SpellCheck">
            <summary>
            A button to load a Spell checker
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.RemoveFormatting">
            <summary>
            A button to remove all formatting from the current selection
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.RemoveLink">
            <summary>
            A button to remove the currently selected hyperlink
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.SelectAll">
            <summary>
            A button to select all the content in the RichTextBox
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FullyJustify">
            <summary>
            A button to justify the text fully
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.AbsolutelyPosition">
            <summary>
            A button to toggle the currently selected object between flow layout and grid layout
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.BringForwards">
            <summary>
            A button to bring an absolutely positioned object forwards in the Z-Order
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.MoveBackwards">
            <summary>
            A button to move an absolutely positioned object backwards in the Z-Order
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.ToggleGuidelines">
            <summary>
            A button to toggle the display of typographical guidelines around tables
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.MergeCells">
            <summary>
            A button to merge the current table cell with the cell immediately to it's right
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.SplitCell">
            <summary>
            A button to split the current table cell in two
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.CleanMSWord">
            <summary>
            A button to clean the HTML in the editor of extraneous Microsoft Word markup
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.PasteMSWord">
            <summary>
            A button to paste clipboard content into the editor, stripping it of extraneous Microsoft
            Word markup prior to pasting.
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertMedia">
            <summary>
            A button to insert Windows Media file
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.InsertFlash">
            <summary>
            A button to insert Macromedia Flash file
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarItem.FullScreen">
            <summary>
            A button to set the editor to Full Screen mode. When clicked the editor fills the whole browser window. When clicked again it returns to it’s original size.
            </summary>
        </member>
        <member name="T:RichTextBoxControl.ToolbarMenu">
            <summary>
            Represents a drop-down menu on the editor toolbar
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarMenu.OnChange">
            <summary>
            Specifies the client-side function that fires when the a menu item is selected. This property specifies just
            the script function name, so you must also create a script function with that same name. It <b>must</b> accept parameters
            as follows:
            <code>function FunctionName(editor,isInHtmlMode,text,value)</code>
            The first parameter is the iframe object that contains the document. The second parameter is a boolean
            indicating whether the editor is in HTML mode. The third parameter is the text of the menu item (the one
            the user sees in the menu). The fourth parameter is the actual value of the menu item.
            </summary>
            <example>
            So, to create a custom menu to insert pieces of HTML:
            <code>ToolbarMenu menu = new ToolbarMenu("custommenu");</code>
            <code>ToolbarMenuItem item = new ToolbarMenuItem();</code>
            <code>item.Name = "Choose me";</code>
            <code>item.Value = "Inserted text";</code>
            <code>menu.Items.Add(item);</code>
            <code>item = new ToolbarMenuItem();</code>
            <code>item.Name = "Another item";</code>
            <code>item.Value = "More inserted text";</code>
            <code>menu.Items.Add(item);</code>
            <code>menu.Title="Test Menu";</code>
            <code>menu.OnChange = "insertHtml";</code>
            <code>richtextbox.CreateToolbarMenu(menu);</code>
            You then add the client-side script function to the page:
            <code>function insertHtml(editor,htmlmode,text,value)
            {
            	editor.focus();
            	sel = editor.document.selection.createRange();
            	sel.pasteHTML(value); 
            }
            </code>
            For more information on working with the Document Object Model in Internet Explorer and manipulating the document in the iframe,
            see MSDN.
            </example>
        </member>
        <member name="F:RichTextBoxControl.ToolbarMenu.Items">
            <summary>
            Holds all the items in the menu
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenu.#ctor(System.String)">
            <summary>
            Public constructor, creates a new, named, toolbar menu
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenu.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="flag"></param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenu.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="flag"></param>
            <param name="queryCommand">Define editor command to query it state</param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenu.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Generates a control hierarchy from the menu
            </summary>
            <param name="buttonType">Type of toolbar button</param>
            <param name="imagePath">Toolbar image width</param>
            <param name="imageWidth">Toolbar image width</param>
            <param name="imageHeight">Toolbar image height</param>
            <param name="separatorWidth">Toolbar separator width</param>
            <param name="separatorHeight">Toolbar separator height</param>
            <param name="rollovers">Are rollovers enabled?</param>
            <param name="buttoncss">CSS class name</param>
            <param name="menucss">CSS class name</param>
            <param name="imageType">Toolbar image type</param>
            <param name="documentID">The RichTextBox ID</param>
            <returns>A hierarchy of Control objects</returns>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenu.GetControl(System.String,System.String)">
            <summary>
            Generates a Control hierarchy for a menu
            </summary>
            <param name="css">The CSS class name</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns>A hierarchy of Control objects</returns>
        </member>
        <member name="T:RichTextBoxControl.ToolbarMenuItem">
            <summary>
            Represents an item on a toolbar drop-down menu
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarMenuItem.BackColor">
            <summary>
            The background color of this menu item. To affect the visual presentation of all menus in the
            editor, look at <see cref="P:RichTextBoxControl.RichTextBox.MenuCssClass"/>
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarMenuItem.Value">
            <summary>
            The value for this menu item (this is not displayed to the end-user)
            </summary>
        </member>
        <member name="F:RichTextBoxControl.ToolbarMenuItem.Name">
            <summary>
            The descriptive name for this menu item (this is displayed to the end user in the menu)
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenuItem.#ctor">
            <summary>
            Create a new toolbar menu item
            </summary>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenuItem.#ctor(System.String)">
            <summary>
            Create a new toolbar menu item from a name
            </summary>
            <param name="name">The name of the menu item</param>
        </member>
        <member name="M:RichTextBoxControl.ToolbarMenuItem.#ctor(System.String,System.String)">
            <summary>
            Create a new toolbar menu item from a name
            </summary>
            <param name="name">The name of the menu item</param>
            <param name="val">The value of the menu item</param>
        </member>
        <member name="T:RichTextBoxControl.Common.ToolbarMenuItemCollection">
            <summary>
            Represents a collection of toolbar menu items (i.e. menu contents)
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarMenuItemCollection.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarMenuItemCollection.Add(RichTextBoxControl.ToolbarMenuItem)">
            <summary>
            Add a menu item
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarMenuItemCollection.Add(System.String,System.String)">
            <summary>
            Add a menu item
            </summary>
            <param name="name">Menu item name</param>
            <param name="val">Menu item value</param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarMenuItemCollection.Add(System.String,System.String,System.Drawing.Color)">
            <summary>
            Add a menu item
            </summary>
            <param name="name">Menu item name</param>
            <param name="val">Menu item value</param>
            <param name="backColor">Menu item background color</param>
        </member>
        <member name="P:RichTextBoxControl.Common.ToolbarMenuItemCollection.Item(System.Int32)">
            <summary>
            Accessor for menu items. Pass in an integer and get back the relevant menu item
            </summary>
        </member>
        <member name="P:RichTextBoxControl.Common.ToolbarMenuItemCollection.Count">
            <summary>
            The number of items in the menu
            </summary>
        </member>
        <member name="T:RichTextBoxControl.Common.ToolbarSeparator">
            <summary>
            Summary description for ToolbarSeparator.
            </summary>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarSeparator.#ctor(System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarSeparator.#ctor(System.String,System.Boolean)">
            <summary>
            Public constructor
            </summary>
            <param name="name"></param>
            <param name="flag"></param>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarSeparator.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Generate a Control hierachy for this toolbar separator object
            </summary>
            <param name="buttonType">Toolbar button type</param>
            <param name="imagePath">Toolbar images location</param>
            <param name="imageWidth">Toolbar image width</param>
            <param name="imageHeight">Toolbar image height</param>
            <param name="separatorWidth">Toolbar separator width</param>
            <param name="separatorHeight">Toolbar separator height</param>
            <param name="rollovers">Whether rollovers are enabled</param>
            <param name="buttoncss">CSS class name</param>
            <param name="menucss">CSS class name</param>
            <param name="imageType">The type of image (gif, jpg, etc)</param>
            <param name="documentID">The ID of the RichTextBox</param>
            <returns></returns>
        </member>
        <member name="M:RichTextBoxControl.Common.ToolbarSeparator.GetControl(RichTextBoxControl.ButtonType,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Generate a Control hierarchy for this toolbar separator object
            </summary>
            <param name="type">Toolbar button type</param>
            <param name="path">Toolbar images location</param>
            <param name="width">Toolbar item width</param>
            <param name="height">Toolbar item height</param>
            <param name="imageType">Type of image (gif, jpg, etc)</param>
            <returns></returns>
        </member>
    </members>
</doc>
